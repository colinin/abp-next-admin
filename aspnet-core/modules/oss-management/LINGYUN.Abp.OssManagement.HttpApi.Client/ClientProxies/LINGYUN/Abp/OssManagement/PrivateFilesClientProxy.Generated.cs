// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Abp.OssManagement;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Abp.OssManagement;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IFileAppService), typeof(PrivateFilesClientProxy))]
public partial class PrivateFilesClientProxy : ClientProxyBase<IFileAppService>, IFileAppService
{
    public virtual async Task<OssObjectDto> UploadAsync(UploadFileInput input)
    {
        return await RequestAsync<OssObjectDto>(nameof(UploadAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UploadFileInput), input }
        });
    }

    public virtual async Task UploadChunkAsync(UploadFileChunkInput input)
    {
        await RequestAsync(nameof(UploadChunkAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UploadFileChunkInput), input }
        });
    }

    public virtual async Task<ListResultDto<OssObjectDto>> GetListAsync(GetFilesInput input)
    {
        return await RequestAsync<ListResultDto<OssObjectDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetFilesInput), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetAsync(GetPublicFileInput input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetPublicFileInput), input }
        });
    }

    public virtual async Task DeleteAsync(GetPublicFileInput input)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetPublicFileInput), input }
        });
    }

    public virtual async Task<ListResultDto<MyFileShareDto>> GetShareListAsync()
    {
        return await RequestAsync<ListResultDto<MyFileShareDto>>(nameof(GetShareListAsync));
    }

    public virtual async Task<FileShareDto> ShareAsync(FileShareInput input)
    {
        return await RequestAsync<FileShareDto>(nameof(ShareAsync), new ClientProxyRequestTypeValue
        {
            { typeof(FileShareInput), input }
        });
    }
}

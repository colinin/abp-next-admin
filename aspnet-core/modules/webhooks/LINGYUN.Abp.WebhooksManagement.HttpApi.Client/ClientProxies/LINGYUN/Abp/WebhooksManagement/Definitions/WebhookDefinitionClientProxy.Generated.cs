// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Abp.WebhooksManagement.Definitions;
using LINGYUN.Abp.WebhooksManagement.Definitions.Dto;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Abp.WebhooksManagement.Definitions;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IWebhookDefinitionAppService), typeof(WebhookDefinitionClientProxy))]
public partial class WebhookDefinitionClientProxy : ClientProxyBase<IWebhookDefinitionAppService>, IWebhookDefinitionAppService
{
    public virtual async Task<WebhookDefinitionDto> CreateAsync(WebhookDefinitionCreateDto input)
    {
        return await RequestAsync<WebhookDefinitionDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(WebhookDefinitionCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(string name)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<WebhookDefinitionDto> GetAsync(string name)
    {
        return await RequestAsync<WebhookDefinitionDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<ListResultDto<WebhookDefinitionDto>> GetListAsync(WebhookDefinitionGetListInput input)
    {
        return await RequestAsync<ListResultDto<WebhookDefinitionDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(WebhookDefinitionGetListInput), input }
        });
    }

    public virtual async Task<WebhookDefinitionDto> UpdateAsync(string name, WebhookDefinitionUpdateDto input)
    {
        return await RequestAsync<WebhookDefinitionDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name },
            { typeof(WebhookDefinitionUpdateDto), input }
        });
    }
}

// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Abp.Auditing.AuditLogs;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Abp.Auditing.AuditLogs;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IEntityChangesAppService), typeof(EntityChangesClientProxy))]
public partial class EntityChangesClientProxy : ClientProxyBase<IEntityChangesAppService>, IEntityChangesAppService
{
    public virtual async Task<EntityChangeDto> GetAsync(Guid id)
    {
        return await RequestAsync<EntityChangeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<EntityChangeDto>> GetListAsync(EntityChangeGetByPagedDto input)
    {
        return await RequestAsync<PagedResultDto<EntityChangeDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EntityChangeGetByPagedDto), input }
        });
    }

    public virtual async Task<EntityChangeWithUsernameDto> GetWithUsernameAsync(Guid id)
    {
        return await RequestAsync<EntityChangeWithUsernameDto>(nameof(GetWithUsernameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<EntityChangeWithUsernameDto>> GetWithUsernameAsync(EntityChangeGetWithUsernameDto input)
    {
        return await RequestAsync<ListResultDto<EntityChangeWithUsernameDto>>(nameof(GetWithUsernameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EntityChangeGetWithUsernameDto), input }
        });
    }
}

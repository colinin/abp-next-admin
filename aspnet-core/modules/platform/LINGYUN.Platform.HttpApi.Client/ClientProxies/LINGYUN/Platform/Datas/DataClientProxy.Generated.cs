// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Platform.Datas;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Platform.Datas;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IDataAppService), typeof(DataClientProxy))]
public partial class DataClientProxy : ClientProxyBase<IDataAppService>, IDataAppService
{
    public virtual async Task<DataDto> CreateAsync(DataCreateDto input)
    {
        return await RequestAsync<DataDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DataCreateDto), input }
        });
    }

    public virtual async Task CreateItemAsync(Guid id, DataItemCreateDto input)
    {
        await RequestAsync(nameof(CreateItemAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(DataItemCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task DeleteItemAsync(Guid id, string name)
    {
        await RequestAsync(nameof(DeleteItemAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(string), name }
        });
    }

    public virtual async Task<DataDto> GetAsync(string name)
    {
        return await RequestAsync<DataDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<DataDto> GetAsync(Guid id)
    {
        return await RequestAsync<DataDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<DataDto>> GetAllAsync()
    {
        return await RequestAsync<ListResultDto<DataDto>>(nameof(GetAllAsync));
    }

    public virtual async Task<PagedResultDto<DataDto>> GetListAsync(GetDataListInput input)
    {
        return await RequestAsync<PagedResultDto<DataDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetDataListInput), input }
        });
    }

    public virtual async Task<DataDto> MoveAsync(Guid id, DataMoveDto input)
    {
        return await RequestAsync<DataDto>(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(DataMoveDto), input }
        });
    }

    public virtual async Task<DataDto> UpdateAsync(Guid id, DataUpdateDto input)
    {
        return await RequestAsync<DataDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(DataUpdateDto), input }
        });
    }

    public virtual async Task UpdateItemAsync(Guid id, string name, DataItemUpdateDto input)
    {
        await RequestAsync(nameof(UpdateItemAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(string), name },
            { typeof(DataItemUpdateDto), input }
        });
    }
}

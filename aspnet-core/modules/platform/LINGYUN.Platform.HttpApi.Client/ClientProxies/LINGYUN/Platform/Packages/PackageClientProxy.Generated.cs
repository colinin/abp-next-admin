// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Platform.Packages;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Platform.Packages;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IPackageAppService), typeof(PackageClientProxy))]
public partial class PackageClientProxy : ClientProxyBase<IPackageAppService>, IPackageAppService
{
    public virtual async Task<PackageDto> CreateAsync(PackageCreateDto input)
    {
        return await RequestAsync<PackageDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PackageCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PackageBlobDto> UploadBlobAsync(Guid id, PackageBlobUploadDto input)
    {
        return await RequestAsync<PackageBlobDto>(nameof(UploadBlobAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PackageBlobUploadDto), input }
        });
    }

    public virtual async Task RemoveBlobAsync(Guid id, PackageBlobRemoveDto input)
    {
        await RequestAsync(nameof(RemoveBlobAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PackageBlobRemoveDto), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> DownloadBlobAsync(Guid id, PackageBlobDownloadInput input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(DownloadBlobAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PackageBlobDownloadInput), input }
        });
    }

    public virtual async Task<PackageDto> GetAsync(Guid id)
    {
        return await RequestAsync<PackageDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PackageDto> GetLatestAsync(PackageGetLatestInput input)
    {
        return await RequestAsync<PackageDto>(nameof(GetLatestAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PackageGetLatestInput), input }
        });
    }

    public virtual async Task<PagedResultDto<PackageDto>> GetListAsync(PackageGetPagedListInput input)
    {
        return await RequestAsync<PagedResultDto<PackageDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PackageGetPagedListInput), input }
        });
    }

    public virtual async Task<PackageDto> UpdateAsync(Guid id, PackageUpdateDto input)
    {
        return await RequestAsync<PackageDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PackageUpdateDto), input }
        });
    }
}

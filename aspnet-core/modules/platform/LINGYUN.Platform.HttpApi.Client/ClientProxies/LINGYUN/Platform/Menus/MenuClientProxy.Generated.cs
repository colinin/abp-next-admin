// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Platform.Menus;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Platform.Menus;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMenuAppService), typeof(MenuClientProxy))]
public partial class MenuClientProxy : ClientProxyBase<IMenuAppService>, IMenuAppService
{
    public virtual async Task<ListResultDto<MenuDto>> GetCurrentUserMenuListAsync(GetMenuInput input)
    {
        return await RequestAsync<ListResultDto<MenuDto>>(nameof(GetCurrentUserMenuListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetMenuInput), input }
        });
    }

    public virtual async Task<MenuDto> GetAsync(Guid id)
    {
        return await RequestAsync<MenuDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<MenuDto>> GetAllAsync(MenuGetAllInput input)
    {
        return await RequestAsync<ListResultDto<MenuDto>>(nameof(GetAllAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MenuGetAllInput), input }
        });
    }

    public virtual async Task<PagedResultDto<MenuDto>> GetListAsync(MenuGetListInput input)
    {
        return await RequestAsync<PagedResultDto<MenuDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MenuGetListInput), input }
        });
    }

    public virtual async Task<MenuDto> CreateAsync(MenuCreateDto input)
    {
        return await RequestAsync<MenuDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MenuCreateDto), input }
        });
    }

    public virtual async Task<MenuDto> UpdateAsync(Guid id, MenuUpdateDto input)
    {
        return await RequestAsync<MenuDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(MenuUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task SetUserMenusAsync(UserMenuInput input)
    {
        await RequestAsync(nameof(SetUserMenusAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserMenuInput), input }
        });
    }

    public virtual async Task SetUserStartupAsync(Guid id, UserMenuStartupInput input)
    {
        await RequestAsync(nameof(SetUserStartupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UserMenuStartupInput), input }
        });
    }

    public virtual async Task<ListResultDto<MenuDto>> GetUserMenuListAsync(MenuGetByUserInput input)
    {
        return await RequestAsync<ListResultDto<MenuDto>>(nameof(GetUserMenuListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MenuGetByUserInput), input }
        });
    }

    public virtual async Task SetRoleMenusAsync(RoleMenuInput input)
    {
        await RequestAsync(nameof(SetRoleMenusAsync), new ClientProxyRequestTypeValue
        {
            { typeof(RoleMenuInput), input }
        });
    }

    public virtual async Task SetRoleStartupAsync(Guid id, RoleMenuStartupInput input)
    {
        await RequestAsync(nameof(SetRoleStartupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(RoleMenuStartupInput), input }
        });
    }

    public virtual async Task<ListResultDto<MenuDto>> GetRoleMenuListAsync(MenuGetByRoleInput input)
    {
        return await RequestAsync<ListResultDto<MenuDto>>(nameof(GetRoleMenuListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MenuGetByRoleInput), input }
        });
    }
}

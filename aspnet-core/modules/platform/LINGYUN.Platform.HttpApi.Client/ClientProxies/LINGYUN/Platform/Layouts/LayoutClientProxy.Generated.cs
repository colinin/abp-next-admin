// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Platform.Layouts;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Platform.Layouts;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ILayoutAppService), typeof(LayoutClientProxy))]
public partial class LayoutClientProxy : ClientProxyBase<ILayoutAppService>, ILayoutAppService
{
    public virtual async Task<LayoutDto> CreateAsync(LayoutCreateDto input)
    {
        return await RequestAsync<LayoutDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LayoutCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<LayoutDto> GetAsync(Guid id)
    {
        return await RequestAsync<LayoutDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<LayoutDto>> GetAllListAsync()
    {
        return await RequestAsync<ListResultDto<LayoutDto>>(nameof(GetAllListAsync));
    }

    public virtual async Task<PagedResultDto<LayoutDto>> GetListAsync(GetLayoutListInput input)
    {
        return await RequestAsync<PagedResultDto<LayoutDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetLayoutListInput), input }
        });
    }

    public virtual async Task<LayoutDto> UpdateAsync(Guid id, LayoutUpdateDto input)
    {
        return await RequestAsync<LayoutDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(LayoutUpdateDto), input }
        });
    }
}

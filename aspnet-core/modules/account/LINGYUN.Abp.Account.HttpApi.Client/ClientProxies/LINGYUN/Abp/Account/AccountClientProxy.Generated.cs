// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Abp.Account;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Abp.Account;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAccountAppService), typeof(AccountClientProxy))]
public partial class AccountClientProxy : ClientProxyBase<IAccountAppService>, IAccountAppService
{
    public virtual async Task RegisterAsync(WeChatRegisterDto input)
    {
        await RequestAsync(nameof(RegisterAsync), new ClientProxyRequestTypeValue
        {
            { typeof(WeChatRegisterDto), input }
        });
    }

    public virtual async Task RegisterAsync(PhoneRegisterDto input)
    {
        await RequestAsync(nameof(RegisterAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PhoneRegisterDto), input }
        });
    }

    public virtual async Task ResetPasswordAsync(PhoneResetPasswordDto input)
    {
        await RequestAsync(nameof(ResetPasswordAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PhoneResetPasswordDto), input }
        });
    }

    public virtual async Task SendPhoneSigninCodeAsync(SendPhoneSigninCodeDto input)
    {
        await RequestAsync(nameof(SendPhoneSigninCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendPhoneSigninCodeDto), input }
        });
    }

    public virtual async Task SendEmailSigninCodeAsync(SendEmailSigninCodeDto input)
    {
        await RequestAsync(nameof(SendEmailSigninCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendEmailSigninCodeDto), input }
        });
    }

    public virtual async Task SendPhoneRegisterCodeAsync(SendPhoneRegisterCodeDto input)
    {
        await RequestAsync(nameof(SendPhoneRegisterCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendPhoneRegisterCodeDto), input }
        });
    }

    public virtual async Task SendPhoneResetPasswordCodeAsync(SendPhoneResetPasswordCodeDto input)
    {
        await RequestAsync(nameof(SendPhoneResetPasswordCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendPhoneResetPasswordCodeDto), input }
        });
    }

    public virtual async Task<ListResultDto<NameValue>> GetTwoFactorProvidersAsync(GetTwoFactorProvidersInput input)
    {
        return await RequestAsync<ListResultDto<NameValue>>(nameof(GetTwoFactorProvidersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetTwoFactorProvidersInput), input }
        });
    }
}

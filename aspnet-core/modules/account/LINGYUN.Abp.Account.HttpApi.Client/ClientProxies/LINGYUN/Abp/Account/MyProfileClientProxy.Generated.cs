// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using LINGYUN.Abp.Account;
using LINGYUN.Abp.Identity;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace LINGYUN.Abp.Account;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMyProfileAppService), typeof(MyProfileClientProxy))]
public partial class MyProfileClientProxy : ClientProxyBase<IMyProfileAppService>, IMyProfileAppService
{
    public virtual async Task<PagedResultDto<IdentitySessionDto>> GetSessionsAsync(GetMySessionsInput input)
    {
        return await RequestAsync<PagedResultDto<IdentitySessionDto>>(nameof(GetSessionsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetMySessionsInput), input }
        });
    }

    public virtual async Task RevokeSessionAsync(string sessionId)
    {
        await RequestAsync(nameof(RevokeSessionAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), sessionId }
        });
    }

    public virtual async Task<TwoFactorEnabledDto> GetTwoFactorEnabledAsync()
    {
        return await RequestAsync<TwoFactorEnabledDto>(nameof(GetTwoFactorEnabledAsync));
    }

    public virtual async Task ChangeTwoFactorEnabledAsync(TwoFactorEnabledDto input)
    {
        await RequestAsync(nameof(ChangeTwoFactorEnabledAsync), new ClientProxyRequestTypeValue
        {
            { typeof(TwoFactorEnabledDto), input }
        });
    }

    public virtual async Task SendChangePhoneNumberCodeAsync(SendChangePhoneNumberCodeInput input)
    {
        await RequestAsync(nameof(SendChangePhoneNumberCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendChangePhoneNumberCodeInput), input }
        });
    }

    public virtual async Task ChangePhoneNumberAsync(ChangePhoneNumberInput input)
    {
        await RequestAsync(nameof(ChangePhoneNumberAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ChangePhoneNumberInput), input }
        });
    }

    public virtual async Task SendEmailConfirmLinkAsync(SendEmailConfirmCodeDto input)
    {
        await RequestAsync(nameof(SendEmailConfirmLinkAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendEmailConfirmCodeDto), input }
        });
    }

    public virtual async Task ConfirmEmailAsync(ConfirmEmailInput input)
    {
        await RequestAsync(nameof(ConfirmEmailAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ConfirmEmailInput), input }
        });
    }

    public virtual async Task<AuthenticatorDto> GetAuthenticatorAsync()
    {
        return await RequestAsync<AuthenticatorDto>(nameof(GetAuthenticatorAsync));
    }

    public virtual async Task<AuthenticatorRecoveryCodeDto> VerifyAuthenticatorCodeAsync(VerifyAuthenticatorCodeInput input)
    {
        return await RequestAsync<AuthenticatorRecoveryCodeDto>(nameof(VerifyAuthenticatorCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(VerifyAuthenticatorCodeInput), input }
        });
    }

    public virtual async Task ResetAuthenticatorAsync()
    {
        await RequestAsync(nameof(ResetAuthenticatorAsync));
    }
}

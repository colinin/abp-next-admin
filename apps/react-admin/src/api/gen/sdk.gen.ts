// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from "@hey-api/client-axios";
import type {
	AbpApiDefinitionGetData,
	AbpApiDefinitionGetError,
	AbpApiDefinitionGetResponse,
	AbpApplicationConfigurationGetData,
	AbpApplicationConfigurationGetError,
	AbpApplicationConfigurationGetResponse,
	AbpApplicationLocalizationGetData,
	AbpApplicationLocalizationGetError,
	AbpApplicationLocalizationGetResponse,
	AbpTenantFindTenantByNameData,
	AbpTenantFindTenantByNameError,
	AbpTenantFindTenantByNameResponse,
	AbpTenantFindTenantByIdData,
	AbpTenantFindTenantByIdError,
	AbpTenantFindTenantByIdResponse,
	AccountRegisterData,
	AccountRegisterError,
	AccountRegisterResponse,
	AccountResetPasswordData,
	AccountResetPasswordError,
	AccountResetPasswordResponse,
	AccountSendPhoneSigninCodeData,
	AccountSendPhoneSigninCodeError,
	AccountSendPhoneSigninCodeResponse,
	AccountSendEmailSigninCodeData,
	AccountSendEmailSigninCodeError,
	AccountSendEmailSigninCodeResponse,
	AccountSendPhoneRegisterCodeData,
	AccountSendPhoneRegisterCodeError,
	AccountSendPhoneRegisterCodeResponse,
	AccountSendPhoneResetPasswordCodeData,
	AccountSendPhoneResetPasswordCodeError,
	AccountSendPhoneResetPasswordCodeResponse,
	AccountGetTwoFactorProvidersData,
	AccountGetTwoFactorProvidersError,
	AccountGetTwoFactorProvidersResponse,
	AccountRegister1Data,
	AccountRegister1Error,
	AccountRegister1Response,
	AccountSendPasswordResetCodeData,
	AccountSendPasswordResetCodeError,
	AccountSendPasswordResetCodeResponse,
	AccountVerifyPasswordResetTokenData,
	AccountVerifyPasswordResetTokenError,
	AccountVerifyPasswordResetTokenResponse,
	AccountResetPassword1Data,
	AccountResetPassword1Error,
	AccountResetPassword1Response,
	AuditLogDeleteData,
	AuditLogDeleteError,
	AuditLogDeleteResponse,
	AuditLogGetData,
	AuditLogGetError,
	AuditLogGetResponse,
	AuditLogGetListData,
	AuditLogGetListError,
	AuditLogGetListResponse,
	BackgroundJobActionAddActionData,
	BackgroundJobActionAddActionError,
	BackgroundJobActionAddActionResponse,
	BackgroundJobActionGetActionsData,
	BackgroundJobActionGetActionsError,
	BackgroundJobActionGetActionsResponse,
	BackgroundJobActionDeleteActionData,
	BackgroundJobActionDeleteActionError,
	BackgroundJobActionDeleteActionResponse,
	BackgroundJobActionUpdateActionData,
	BackgroundJobActionUpdateActionError,
	BackgroundJobActionUpdateActionResponse,
	BackgroundJobActionGetDefinitionsData,
	BackgroundJobActionGetDefinitionsError,
	BackgroundJobActionGetDefinitionsResponse,
	BackgroundJobInfoCreateData,
	BackgroundJobInfoCreateError,
	BackgroundJobInfoCreateResponse,
	BackgroundJobInfoGetListData,
	BackgroundJobInfoGetListError,
	BackgroundJobInfoGetListResponse,
	BackgroundJobInfoDeleteData,
	BackgroundJobInfoDeleteError,
	BackgroundJobInfoDeleteResponse,
	BackgroundJobInfoGetData,
	BackgroundJobInfoGetError,
	BackgroundJobInfoGetResponse,
	BackgroundJobInfoUpdateData,
	BackgroundJobInfoUpdateError,
	BackgroundJobInfoUpdateResponse,
	BackgroundJobInfoPauseData,
	BackgroundJobInfoPauseError,
	BackgroundJobInfoPauseResponse,
	BackgroundJobInfoResumeData,
	BackgroundJobInfoResumeError,
	BackgroundJobInfoResumeResponse,
	BackgroundJobInfoTriggerData,
	BackgroundJobInfoTriggerError,
	BackgroundJobInfoTriggerResponse,
	BackgroundJobInfoStopData,
	BackgroundJobInfoStopError,
	BackgroundJobInfoStopResponse,
	BackgroundJobInfoStartData,
	BackgroundJobInfoStartError,
	BackgroundJobInfoStartResponse,
	BackgroundJobInfoBulkStopData,
	BackgroundJobInfoBulkStopError,
	BackgroundJobInfoBulkStopResponse,
	BackgroundJobInfoBulkStartData,
	BackgroundJobInfoBulkStartError,
	BackgroundJobInfoBulkStartResponse,
	BackgroundJobInfoBulkTriggerData,
	BackgroundJobInfoBulkTriggerError,
	BackgroundJobInfoBulkTriggerResponse,
	BackgroundJobInfoBulkResumeData,
	BackgroundJobInfoBulkResumeError,
	BackgroundJobInfoBulkResumeResponse,
	BackgroundJobInfoBulkPauseData,
	BackgroundJobInfoBulkPauseError,
	BackgroundJobInfoBulkPauseResponse,
	BackgroundJobInfoBulkDeleteData,
	BackgroundJobInfoBulkDeleteError,
	BackgroundJobInfoBulkDeleteResponse,
	BackgroundJobInfoGetDefinitionsData,
	BackgroundJobInfoGetDefinitionsError,
	BackgroundJobInfoGetDefinitionsResponse,
	BackgroundJobInfoGetAvailableFieldsData,
	BackgroundJobInfoGetAvailableFieldsError,
	BackgroundJobInfoGetAvailableFieldsResponse,
	BackgroundJobInfoSearchData,
	BackgroundJobInfoSearchError,
	BackgroundJobInfoSearchResponse,
	BackgroundJobLogDeleteData,
	BackgroundJobLogDeleteError,
	BackgroundJobLogDeleteResponse,
	BackgroundJobLogGetData,
	BackgroundJobLogGetError,
	BackgroundJobLogGetResponse,
	BackgroundJobLogGetListData,
	BackgroundJobLogGetListError,
	BackgroundJobLogGetListResponse,
	BackupHandleData,
	BackupHandleError,
	BackupHandleResponse,
	BulkCancelHandleData,
	BulkCancelHandleError,
	BulkCancelHandleResponse,
	BulkDeleteHandleData,
	BulkDeleteHandleError,
	BulkDeleteHandleResponse,
	BulkRetryHandleData,
	BulkRetryHandleError,
	BulkRetryHandleResponse,
	CacheGetKeysData,
	CacheGetKeysError,
	CacheGetKeysResponse,
	CacheGetValueData,
	CacheGetValueError,
	CacheGetValueResponse,
	CacheSetData,
	CacheSetError,
	CacheSetResponse,
	CacheRefreshData,
	CacheRefreshError,
	CacheRefreshResponse,
	CacheRemoveData,
	CacheRemoveError,
	CacheRemoveResponse,
	CancelHandleData,
	CancelHandleError,
	CancelHandleResponse,
	ChatGetMyGroupMessageData,
	ChatGetMyGroupMessageError,
	ChatGetMyGroupMessageResponse,
	ChatGetMyChatMessageData,
	ChatGetMyChatMessageError,
	ChatGetMyChatMessageResponse,
	ChatGetMyLastChatMessageData,
	ChatGetMyLastChatMessageError,
	ChatGetMyLastChatMessageResponse,
	ChatSendMessageData,
	ChatSendMessageError,
	ChatSendMessageResponse,
	ClaimChangeAvatarData,
	ClaimChangeAvatarError,
	ClaimChangeAvatarResponse,
	ClaimTypeCreateData,
	ClaimTypeCreateError,
	ClaimTypeCreateResponse,
	ClaimTypeGetListData,
	ClaimTypeGetListError,
	ClaimTypeGetListResponse,
	ClaimTypeDeleteData,
	ClaimTypeDeleteError,
	ClaimTypeDeleteResponse,
	ClaimTypeGetData,
	ClaimTypeGetError,
	ClaimTypeGetResponse,
	ClaimTypeUpdateData,
	ClaimTypeUpdateError,
	ClaimTypeUpdateResponse,
	ClaimTypeGetAllListData,
	ClaimTypeGetAllListError,
	ClaimTypeGetAllListResponse,
	DataCreateData,
	DataCreateError,
	DataCreateResponse,
	DataGetListData,
	DataGetListError,
	DataGetListResponse,
	DataCreateItemData,
	DataCreateItemError,
	DataCreateItemResponse,
	DataDeleteData,
	DataDeleteError,
	DataDeleteResponse,
	DataGetData,
	DataGetError,
	DataGetResponse,
	DataUpdateData,
	DataUpdateError,
	DataUpdateResponse,
	DataDeleteItemData,
	DataDeleteItemError,
	DataDeleteItemResponse,
	DataUpdateItemData,
	DataUpdateItemError,
	DataUpdateItemResponse,
	DataGet1Data,
	DataGet1Error,
	DataGet1Response,
	DataGetAllData,
	DataGetAllError,
	DataGetAllResponse,
	DataMoveData,
	DataMoveError,
	DataMoveResponse,
	DeleteHandleData,
	DeleteHandleError,
	DeleteHandleResponse,
	GetHandleData,
	GetHandleError,
	GetHandleResponse,
	DeleteHandle1Data,
	DeleteHandle1Error,
	DeleteHandle1Response,
	GetHandle1Data,
	GetHandle1Error,
	GetHandle1Response,
	DeleteByDefinitionHandleData,
	DeleteByDefinitionHandleError,
	DeleteByDefinitionHandleResponse,
	DeleteByDefinitionAndVersionHandleData,
	DeleteByDefinitionAndVersionHandleError,
	DeleteByDefinitionAndVersionHandleResponse,
	DispatchHandleData,
	DispatchHandleError,
	DispatchHandleResponse,
	DispatchHandle1Data,
	DispatchHandle1Error,
	DispatchHandle1Response,
	DispatchHandle2Data,
	DispatchHandle2Error,
	DispatchHandle2Response,
	DispatchEndpointHandleData,
	DispatchEndpointHandleError,
	DispatchEndpointHandleResponse,
	DispatchEndpointHandle1Data,
	DispatchEndpointHandle1Error,
	DispatchEndpointHandle1Response,
	DynamicClaimsRefreshData,
	DynamicClaimsRefreshError,
	DynamicClaimsRefreshResponse,
	EditionCreateData,
	EditionCreateError,
	EditionCreateResponse,
	EditionGetListData,
	EditionGetListError,
	EditionGetListResponse,
	EditionDeleteData,
	EditionDeleteError,
	EditionDeleteResponse,
	EditionGetData,
	EditionGetError,
	EditionGetResponse,
	EditionUpdateData,
	EditionUpdateError,
	EditionUpdateResponse,
	EntityChangesGetData,
	EntityChangesGetError,
	EntityChangesGetResponse,
	EntityChangesGetListData,
	EntityChangesGetListError,
	EntityChangesGetListResponse,
	EntityChangesGetWithUsernameData,
	EntityChangesGetWithUsernameError,
	EntityChangesGetWithUsernameResponse,
	EntityChangesGetWithUsername1Data,
	EntityChangesGetWithUsername1Error,
	EntityChangesGetWithUsername1Response,
	EntityTypeInfoGetData,
	EntityTypeInfoGetError,
	EntityTypeInfoGetResponse,
	EntityTypeInfoGetListData,
	EntityTypeInfoGetListError,
	EntityTypeInfoGetListResponse,
	ExecuteHandleData,
	ExecuteHandleError,
	ExecuteHandleResponse,
	ExecuteHandle1Data,
	ExecuteHandle1Error,
	ExecuteHandle1Response,
	ExecuteHandle2Data,
	ExecuteHandle2Error,
	ExecuteHandle2Response,
	ExportHandleData,
	ExportHandleError,
	ExportHandleResponse,
	FeatureDefinitionCreateData,
	FeatureDefinitionCreateError,
	FeatureDefinitionCreateResponse,
	FeatureDefinitionGetListData,
	FeatureDefinitionGetListError,
	FeatureDefinitionGetListResponse,
	FeatureDefinitionDeleteData,
	FeatureDefinitionDeleteError,
	FeatureDefinitionDeleteResponse,
	FeatureDefinitionGetData,
	FeatureDefinitionGetError,
	FeatureDefinitionGetResponse,
	FeatureDefinitionUpdateData,
	FeatureDefinitionUpdateError,
	FeatureDefinitionUpdateResponse,
	FeatureGroupDefinitionCreateData,
	FeatureGroupDefinitionCreateError,
	FeatureGroupDefinitionCreateResponse,
	FeatureGroupDefinitionGetListData,
	FeatureGroupDefinitionGetListError,
	FeatureGroupDefinitionGetListResponse,
	FeatureGroupDefinitionDeleteData,
	FeatureGroupDefinitionDeleteError,
	FeatureGroupDefinitionDeleteResponse,
	FeatureGroupDefinitionGetData,
	FeatureGroupDefinitionGetError,
	FeatureGroupDefinitionGetResponse,
	FeatureGroupDefinitionUpdateData,
	FeatureGroupDefinitionUpdateError,
	FeatureGroupDefinitionUpdateResponse,
	FeaturesGetData,
	FeaturesGetError,
	FeaturesGetResponse,
	FeaturesUpdateData,
	FeaturesUpdateError,
	FeaturesUpdateResponse,
	FeaturesDeleteData,
	FeaturesDeleteError,
	FeaturesDeleteResponse,
	FeedbackCreateData,
	FeedbackCreateError,
	FeedbackCreateResponse,
	FeedbackGetListData,
	FeedbackGetListError,
	FeedbackGetListResponse,
	FeedbackDeleteData,
	FeedbackDeleteError,
	FeedbackDeleteResponse,
	FeedbackGetData,
	FeedbackGetError,
	FeedbackGetResponse,
	FeedbackAttachmentGetData,
	FeedbackAttachmentGetError,
	FeedbackAttachmentGetResponse,
	FeedbackAttachmentDeleteData,
	FeedbackAttachmentDeleteError,
	FeedbackAttachmentDeleteResponse,
	FeedbackAttachmentUploadData,
	FeedbackAttachmentUploadError,
	FeedbackAttachmentUploadResponse,
	GetHandle2Data,
	GetHandle2Error,
	GetHandle2Response,
	GetHandle3Data,
	GetHandle3Error,
	GetHandle3Response,
	GetHandle4Data,
	GetHandle4Error,
	GetHandle4Response,
	GetHandle5Data,
	GetHandle5Error,
	GetHandle5Response,
	GetHandle6Data,
	GetHandle6Error,
	GetHandle6Response,
	GetHandle7Data,
	GetHandle7Error,
	GetHandle7Response,
	GetByDefinitionAndVersionHandleData,
	GetByDefinitionAndVersionHandleError,
	GetByDefinitionAndVersionHandleResponse,
	GetByVersionIdHandleData,
	GetByVersionIdHandleError,
	GetByVersionIdHandleResponse,
	GroupGetData,
	GroupGetError,
	GroupGetResponse,
	GroupSearchData,
	GroupSearchError,
	GroupSearchResponse,
	HistoryHandleData,
	HistoryHandleError,
	HistoryHandleResponse,
	IdentitySessionsGetSessionsData,
	IdentitySessionsGetSessionsError,
	IdentitySessionsGetSessionsResponse,
	IdentitySessionsRevokeSessionData,
	IdentitySessionsRevokeSessionError,
	IdentitySessionsRevokeSessionResponse,
	ImportHandleData,
	ImportHandleError,
	ImportHandleResponse,
	LanguageGetByNameData,
	LanguageGetByNameError,
	LanguageGetByNameResponse,
	LanguageDeleteData,
	LanguageDeleteError,
	LanguageDeleteResponse,
	LanguageUpdateData,
	LanguageUpdateError,
	LanguageUpdateResponse,
	LanguageCreateData,
	LanguageCreateError,
	LanguageCreateResponse,
	LanguageGetListData,
	LanguageGetListError,
	LanguageGetListResponse,
	LayoutCreateData,
	LayoutCreateError,
	LayoutCreateResponse,
	LayoutGetListData,
	LayoutGetListError,
	LayoutGetListResponse,
	LayoutDeleteData,
	LayoutDeleteError,
	LayoutDeleteResponse,
	LayoutGetData,
	LayoutGetError,
	LayoutGetResponse,
	LayoutUpdateData,
	LayoutUpdateError,
	LayoutUpdateResponse,
	LayoutGetAllListData,
	LayoutGetAllListError,
	LayoutGetAllListResponse,
	ListHandleData,
	ListHandleError,
	ListHandleResponse,
	ListHandle1Data,
	ListHandle1Error,
	ListHandle1Response,
	ListHandle2Data,
	ListHandle2Error,
	ListHandle2Response,
	ListHandle3Data,
	ListHandle3Error,
	ListHandle3Response,
	SaveHandleData,
	SaveHandleError,
	SaveHandleResponse,
	ListHandle4Data,
	ListHandle4Error,
	ListHandle4Response,
	ListHandle5Data,
	ListHandle5Error,
	ListHandle5Response,
	ListHandle6Data,
	ListHandle6Error,
	ListHandle6Response,
	ListHandle7Data,
	ListHandle7Error,
	ListHandle7Response,
	PostHandleData,
	PostHandleError,
	PostHandleResponse,
	UpdateHandleData,
	UpdateHandleError,
	UpdateHandleResponse,
	ListAllHandleData,
	ListAllHandleError,
	ListAllHandleResponse,
	ListByDefinitionVersionIdsHandleData,
	ListByDefinitionVersionIdsHandleError,
	ListByDefinitionVersionIdsHandleResponse,
	ListByProviderHandleData,
	ListByProviderHandleError,
	ListByProviderHandleResponse,
	LoggingGetData,
	LoggingGetError,
	LoggingGetResponse,
	LoggingGetListData,
	LoggingGetListError,
	LoggingGetListResponse,
	LoginLoginData,
	LoginLoginError,
	LoginLoginResponse,
	LoginLogoutData,
	LoginLogoutError,
	LoginLogoutResponse,
	LoginCheckPasswordData,
	LoginCheckPasswordError,
	LoginCheckPasswordResponse,
	MenuGetCurrentUserMenuListData,
	MenuGetCurrentUserMenuListError,
	MenuGetCurrentUserMenuListResponse,
	MenuGetData,
	MenuGetError,
	MenuGetResponse,
	MenuUpdateData,
	MenuUpdateError,
	MenuUpdateResponse,
	MenuDeleteData,
	MenuDeleteError,
	MenuDeleteResponse,
	MenuGetAllData,
	MenuGetAllError,
	MenuGetAllResponse,
	MenuGetListData,
	MenuGetListError,
	MenuGetListResponse,
	MenuCreateData,
	MenuCreateError,
	MenuCreateResponse,
	MenuSetUserMenusData,
	MenuSetUserMenusError,
	MenuSetUserMenusResponse,
	MenuGetUserMenuListData,
	MenuGetUserMenuListError,
	MenuGetUserMenuListResponse,
	MenuSetUserStartupData,
	MenuSetUserStartupError,
	MenuSetUserStartupResponse,
	MenuGetUserMenuList1Data,
	MenuGetUserMenuList1Error,
	MenuGetUserMenuList1Response,
	MenuSetRoleMenusData,
	MenuSetRoleMenusError,
	MenuSetRoleMenusResponse,
	MenuGetRoleMenuListData,
	MenuGetRoleMenuListError,
	MenuGetRoleMenuListResponse,
	MenuSetRoleStartupData,
	MenuSetRoleStartupError,
	MenuSetRoleStartupResponse,
	MenuGetRoleMenuList1Data,
	MenuGetRoleMenuList1Error,
	MenuGetRoleMenuList1Response,
	MyFeedbackGetMyFeedbacksData,
	MyFeedbackGetMyFeedbacksError,
	MyFeedbackGetMyFeedbacksResponse,
	MyFriendCreateData,
	MyFriendCreateError,
	MyFriendCreateResponse,
	MyFriendDeleteData,
	MyFriendDeleteError,
	MyFriendDeleteResponse,
	MyFriendGetListData,
	MyFriendGetListError,
	MyFriendGetListResponse,
	MyFriendAddRequestData,
	MyFriendAddRequestError,
	MyFriendAddRequestResponse,
	MyFriendGetData,
	MyFriendGetError,
	MyFriendGetResponse,
	MyFriendGetAllListData,
	MyFriendGetAllListError,
	MyFriendGetAllListResponse,
	MyNotificationMarkReadStateData,
	MyNotificationMarkReadStateError,
	MyNotificationMarkReadStateResponse,
	MyNotificationDeleteData,
	MyNotificationDeleteError,
	MyNotificationDeleteResponse,
	MyNotificationGetData,
	MyNotificationGetError,
	MyNotificationGetResponse,
	MyNotificationGetListData,
	MyNotificationGetListError,
	MyNotificationGetListResponse,
	MySubscriptionGetAllListData,
	MySubscriptionGetAllListError,
	MySubscriptionGetAllListResponse,
	MySubscriptionGetListData,
	MySubscriptionGetListError,
	MySubscriptionGetListResponse,
	MySubscriptionSubscribeData,
	MySubscriptionSubscribeError,
	MySubscriptionSubscribeResponse,
	MySubscriptionUnSubscribeData,
	MySubscriptionUnSubscribeError,
	MySubscriptionUnSubscribeResponse,
	MySubscriptionIsSubscribedData,
	MySubscriptionIsSubscribedError,
	MySubscriptionIsSubscribedResponse,
	NotificationSendData,
	NotificationSendError,
	NotificationSendResponse,
	NotificationSend1Data,
	NotificationSend1Error,
	NotificationSend1Response,
	NotificationGetAssignableNotifiersData,
	NotificationGetAssignableNotifiersError,
	NotificationGetAssignableNotifiersResponse,
	NotificationGetAssignableTemplatesData,
	NotificationGetAssignableTemplatesError,
	NotificationGetAssignableTemplatesResponse,
	NotificationDefinitionCreateData,
	NotificationDefinitionCreateError,
	NotificationDefinitionCreateResponse,
	NotificationDefinitionGetListData,
	NotificationDefinitionGetListError,
	NotificationDefinitionGetListResponse,
	NotificationDefinitionDeleteData,
	NotificationDefinitionDeleteError,
	NotificationDefinitionDeleteResponse,
	NotificationDefinitionGetData,
	NotificationDefinitionGetError,
	NotificationDefinitionGetResponse,
	NotificationDefinitionUpdateData,
	NotificationDefinitionUpdateError,
	NotificationDefinitionUpdateResponse,
	NotificationGroupDefinitionCreateData,
	NotificationGroupDefinitionCreateError,
	NotificationGroupDefinitionCreateResponse,
	NotificationGroupDefinitionGetListData,
	NotificationGroupDefinitionGetListError,
	NotificationGroupDefinitionGetListResponse,
	NotificationGroupDefinitionDeleteData,
	NotificationGroupDefinitionDeleteError,
	NotificationGroupDefinitionDeleteResponse,
	NotificationGroupDefinitionGetData,
	NotificationGroupDefinitionGetError,
	NotificationGroupDefinitionGetResponse,
	NotificationGroupDefinitionUpdateData,
	NotificationGroupDefinitionUpdateError,
	NotificationGroupDefinitionUpdateResponse,
	OpenIddictApplicationGetData,
	OpenIddictApplicationGetError,
	OpenIddictApplicationGetResponse,
	OpenIddictApplicationUpdateData,
	OpenIddictApplicationUpdateError,
	OpenIddictApplicationUpdateResponse,
	OpenIddictApplicationDeleteData,
	OpenIddictApplicationDeleteError,
	OpenIddictApplicationDeleteResponse,
	OpenIddictApplicationGetListData,
	OpenIddictApplicationGetListError,
	OpenIddictApplicationGetListResponse,
	OpenIddictApplicationCreateData,
	OpenIddictApplicationCreateError,
	OpenIddictApplicationCreateResponse,
	OpenIddictAuthorizationDeleteData,
	OpenIddictAuthorizationDeleteError,
	OpenIddictAuthorizationDeleteResponse,
	OpenIddictAuthorizationGetData,
	OpenIddictAuthorizationGetError,
	OpenIddictAuthorizationGetResponse,
	OpenIddictAuthorizationGetListData,
	OpenIddictAuthorizationGetListError,
	OpenIddictAuthorizationGetListResponse,
	OpenIddictScopeCreateData,
	OpenIddictScopeCreateError,
	OpenIddictScopeCreateResponse,
	OpenIddictScopeGetListData,
	OpenIddictScopeGetListError,
	OpenIddictScopeGetListResponse,
	OpenIddictScopeDeleteData,
	OpenIddictScopeDeleteError,
	OpenIddictScopeDeleteResponse,
	OpenIddictScopeGetData,
	OpenIddictScopeGetError,
	OpenIddictScopeGetResponse,
	OpenIddictScopeUpdateData,
	OpenIddictScopeUpdateError,
	OpenIddictScopeUpdateResponse,
	OpenIddictTokenDeleteData,
	OpenIddictTokenDeleteError,
	OpenIddictTokenDeleteResponse,
	OpenIddictTokenGetData,
	OpenIddictTokenGetError,
	OpenIddictTokenGetResponse,
	OpenIddictTokenGetListData,
	OpenIddictTokenGetListError,
	OpenIddictTokenGetListResponse,
	OrganizationUnitsCreateData,
	OrganizationUnitsCreateError,
	OrganizationUnitsCreateResponse,
	OrganizationUnitsGetListData,
	OrganizationUnitsGetListError,
	OrganizationUnitsGetListResponse,
	OrganizationUnitsDeleteData,
	OrganizationUnitsDeleteError,
	OrganizationUnitsDeleteResponse,
	OrganizationUnitsGetData,
	OrganizationUnitsGetError,
	OrganizationUnitsGetResponse,
	OrganizationUnitsUpdateData,
	OrganizationUnitsUpdateError,
	OrganizationUnitsUpdateResponse,
	OrganizationUnitsFindChildrenData,
	OrganizationUnitsFindChildrenError,
	OrganizationUnitsFindChildrenResponse,
	OrganizationUnitsGetRootData,
	OrganizationUnitsGetRootError,
	OrganizationUnitsGetRootResponse,
	OrganizationUnitsGetLastChildOrNullData,
	OrganizationUnitsGetLastChildOrNullError,
	OrganizationUnitsGetLastChildOrNullResponse,
	OrganizationUnitsGetAllListData,
	OrganizationUnitsGetAllListError,
	OrganizationUnitsGetAllListResponse,
	OrganizationUnitsGetRoleNamesData,
	OrganizationUnitsGetRoleNamesError,
	OrganizationUnitsGetRoleNamesResponse,
	OrganizationUnitsGetUnaddedRolesData,
	OrganizationUnitsGetUnaddedRolesError,
	OrganizationUnitsGetUnaddedRolesResponse,
	OrganizationUnitsGetRolesData,
	OrganizationUnitsGetRolesError,
	OrganizationUnitsGetRolesResponse,
	OrganizationUnitsAddRolesData,
	OrganizationUnitsAddRolesError,
	OrganizationUnitsAddRolesResponse,
	OrganizationUnitsGetUnaddedUsersData,
	OrganizationUnitsGetUnaddedUsersError,
	OrganizationUnitsGetUnaddedUsersResponse,
	OrganizationUnitsGetUsersData,
	OrganizationUnitsGetUsersError,
	OrganizationUnitsGetUsersResponse,
	OrganizationUnitsAddUsersData,
	OrganizationUnitsAddUsersError,
	OrganizationUnitsAddUsersResponse,
	OrganizationUnitsMoveData,
	OrganizationUnitsMoveError,
	OrganizationUnitsMoveResponse,
	OrganizationUnitEntityRuleGetData,
	OrganizationUnitEntityRuleGetError,
	OrganizationUnitEntityRuleGetResponse,
	OrganizationUnitEntityRuleCreateData,
	OrganizationUnitEntityRuleCreateError,
	OrganizationUnitEntityRuleCreateResponse,
	OrganizationUnitEntityRuleUpdateData,
	OrganizationUnitEntityRuleUpdateError,
	OrganizationUnitEntityRuleUpdateResponse,
	OssContainerCreateData,
	OssContainerCreateError,
	OssContainerCreateResponse,
	OssContainerDeleteData,
	OssContainerDeleteError,
	OssContainerDeleteResponse,
	OssContainerGetData,
	OssContainerGetError,
	OssContainerGetResponse,
	OssContainerGetListData,
	OssContainerGetListError,
	OssContainerGetListResponse,
	OssContainerGetObjectListData,
	OssContainerGetObjectListError,
	OssContainerGetObjectListResponse,
	OssManagementSettingGetAllForCurrentTenantData,
	OssManagementSettingGetAllForCurrentTenantError,
	OssManagementSettingGetAllForCurrentTenantResponse,
	OssManagementSettingGetAllForGlobalData,
	OssManagementSettingGetAllForGlobalError,
	OssManagementSettingGetAllForGlobalResponse,
	OssObjectCreateData,
	OssObjectCreateError,
	OssObjectCreateResponse,
	OssObjectDeleteData,
	OssObjectDeleteError,
	OssObjectDeleteResponse,
	OssObjectGetData,
	OssObjectGetError,
	OssObjectGetResponse,
	OssObjectUploadData,
	OssObjectUploadError,
	OssObjectUploadResponse,
	OssObjectBulkDeleteData,
	OssObjectBulkDeleteError,
	OssObjectBulkDeleteResponse,
	OssObjectGetContentData,
	OssObjectGetContentError,
	OssObjectGetContentResponse,
	PackageCreateData,
	PackageCreateError,
	PackageCreateResponse,
	PackageGetListData,
	PackageGetListError,
	PackageGetListResponse,
	PackageDeleteData,
	PackageDeleteError,
	PackageDeleteResponse,
	PackageGetData,
	PackageGetError,
	PackageGetResponse,
	PackageUpdateData,
	PackageUpdateError,
	PackageUpdateResponse,
	PackageUploadBlobData,
	PackageUploadBlobError,
	PackageUploadBlobResponse,
	PackageRemoveBlobData,
	PackageRemoveBlobError,
	PackageRemoveBlobResponse,
	PackageDownloadBlobData,
	PackageDownloadBlobError,
	PackageDownloadBlobResponse,
	PackageGetLatestData,
	PackageGetLatestError,
	PackageGetLatestResponse,
	PackageGetLatest1Data,
	PackageGetLatest1Error,
	PackageGetLatest1Response,
	PermissionDefinitionCreateData,
	PermissionDefinitionCreateError,
	PermissionDefinitionCreateResponse,
	PermissionDefinitionGetListData,
	PermissionDefinitionGetListError,
	PermissionDefinitionGetListResponse,
	PermissionDefinitionDeleteData,
	PermissionDefinitionDeleteError,
	PermissionDefinitionDeleteResponse,
	PermissionDefinitionGetData,
	PermissionDefinitionGetError,
	PermissionDefinitionGetResponse,
	PermissionDefinitionUpdateData,
	PermissionDefinitionUpdateError,
	PermissionDefinitionUpdateResponse,
	PermissionGroupDefinitionCreateData,
	PermissionGroupDefinitionCreateError,
	PermissionGroupDefinitionCreateResponse,
	PermissionGroupDefinitionGetListData,
	PermissionGroupDefinitionGetListError,
	PermissionGroupDefinitionGetListResponse,
	PermissionGroupDefinitionDeleteData,
	PermissionGroupDefinitionDeleteError,
	PermissionGroupDefinitionDeleteResponse,
	PermissionGroupDefinitionGetData,
	PermissionGroupDefinitionGetError,
	PermissionGroupDefinitionGetResponse,
	PermissionGroupDefinitionUpdateData,
	PermissionGroupDefinitionUpdateError,
	PermissionGroupDefinitionUpdateResponse,
	PermissionsGetData,
	PermissionsGetError,
	PermissionsGetResponse,
	PermissionsUpdateData,
	PermissionsUpdateError,
	PermissionsUpdateResponse,
	PrivateFilesUploadData,
	PrivateFilesUploadError,
	PrivateFilesUploadResponse,
	PrivateFilesDeleteData,
	PrivateFilesDeleteError,
	PrivateFilesDeleteResponse,
	PrivateFilesUpload1Data,
	PrivateFilesUpload1Error,
	PrivateFilesUpload1Response,
	PrivateFilesGetListData,
	PrivateFilesGetListError,
	PrivateFilesGetListResponse,
	PrivateFilesGetData,
	PrivateFilesGetError,
	PrivateFilesGetResponse,
	PrivateFilesGet1Data,
	PrivateFilesGet1Error,
	PrivateFilesGet1Response,
	PrivateFilesGet2Data,
	PrivateFilesGet2Error,
	PrivateFilesGet2Response,
	PrivateFilesGet3Data,
	PrivateFilesGet3Error,
	PrivateFilesGet3Response,
	PrivateFilesGet4Data,
	PrivateFilesGet4Error,
	PrivateFilesGet4Response,
	PrivateFilesGet5Data,
	PrivateFilesGet5Error,
	PrivateFilesGet5Response,
	PrivateFilesGet6Data,
	PrivateFilesGet6Error,
	PrivateFilesGet6Response,
	PrivateFilesGet7Data,
	PrivateFilesGet7Error,
	PrivateFilesGet7Response,
	PrivateFilesGetShareListData,
	PrivateFilesGetShareListError,
	PrivateFilesGetShareListResponse,
	PrivateFilesShareData,
	PrivateFilesShareError,
	PrivateFilesShareResponse,
	ProfileGetSessionsData,
	ProfileGetSessionsError,
	ProfileGetSessionsResponse,
	ProfileRevokeSessionData,
	ProfileRevokeSessionError,
	ProfileRevokeSessionResponse,
	ProfileGetTwoFactorEnabledData,
	ProfileGetTwoFactorEnabledError,
	ProfileGetTwoFactorEnabledResponse,
	ProfileChangeTwoFactorEnabledData,
	ProfileChangeTwoFactorEnabledError,
	ProfileChangeTwoFactorEnabledResponse,
	ProfileSendChangePhoneNumberCodeData,
	ProfileSendChangePhoneNumberCodeError,
	ProfileSendChangePhoneNumberCodeResponse,
	ProfileChangePhoneNumberData,
	ProfileChangePhoneNumberError,
	ProfileChangePhoneNumberResponse,
	ProfileSendEmailConfirmLinkData,
	ProfileSendEmailConfirmLinkError,
	ProfileSendEmailConfirmLinkResponse,
	ProfileConfirmEmailData,
	ProfileConfirmEmailError,
	ProfileConfirmEmailResponse,
	ProfileGetAuthenticatorData,
	ProfileGetAuthenticatorError,
	ProfileGetAuthenticatorResponse,
	ProfileVerifyAuthenticatorCodeData,
	ProfileVerifyAuthenticatorCodeError,
	ProfileVerifyAuthenticatorCodeResponse,
	ProfileResetAuthenticatorData,
	ProfileResetAuthenticatorError,
	ProfileResetAuthenticatorResponse,
	ProfileGetData,
	ProfileGetError,
	ProfileGetResponse,
	ProfileUpdateData,
	ProfileUpdateError,
	ProfileUpdateResponse,
	ProfileChangePasswordData,
	ProfileChangePasswordError,
	ProfileChangePasswordResponse,
	PublicFilesUploadData,
	PublicFilesUploadError,
	PublicFilesUploadResponse,
	PublicFilesDeleteData,
	PublicFilesDeleteError,
	PublicFilesDeleteResponse,
	PublicFilesUpload1Data,
	PublicFilesUpload1Error,
	PublicFilesUpload1Response,
	PublicFilesGetListData,
	PublicFilesGetListError,
	PublicFilesGetListResponse,
	PublicFilesGetData,
	PublicFilesGetError,
	PublicFilesGetResponse,
	PublicFilesGet1Data,
	PublicFilesGet1Error,
	PublicFilesGet1Response,
	PublicFilesGet2Data,
	PublicFilesGet2Error,
	PublicFilesGet2Response,
	PublicFilesGet3Data,
	PublicFilesGet3Error,
	PublicFilesGet3Response,
	PublicFilesGet4Data,
	PublicFilesGet4Error,
	PublicFilesGet4Response,
	PublicFilesGet5Data,
	PublicFilesGet5Error,
	PublicFilesGet5Response,
	PublicFilesGet6Data,
	PublicFilesGet6Error,
	PublicFilesGet6Response,
	PublicFilesGet7Data,
	PublicFilesGet7Error,
	PublicFilesGet7Response,
	PublishHandleData,
	PublishHandleError,
	PublishHandleResponse,
	ResourceGetByNameData,
	ResourceGetByNameError,
	ResourceGetByNameResponse,
	ResourceDeleteData,
	ResourceDeleteError,
	ResourceDeleteResponse,
	ResourceUpdateData,
	ResourceUpdateError,
	ResourceUpdateResponse,
	ResourceCreateData,
	ResourceCreateError,
	ResourceCreateResponse,
	ResourceGetListData,
	ResourceGetListError,
	ResourceGetListResponse,
	RestoreHandleData,
	RestoreHandleError,
	RestoreHandleResponse,
	RetractHandleData,
	RetractHandleError,
	RetractHandleResponse,
	RetryHandleData,
	RetryHandleError,
	RetryHandleResponse,
	RevertHandleData,
	RevertHandleError,
	RevertHandleResponse,
	RoleGetOrganizationUnitsData,
	RoleGetOrganizationUnitsError,
	RoleGetOrganizationUnitsResponse,
	RoleSetOrganizationUnitsData,
	RoleSetOrganizationUnitsError,
	RoleSetOrganizationUnitsResponse,
	RoleRemoveOrganizationUnitsData,
	RoleRemoveOrganizationUnitsError,
	RoleRemoveOrganizationUnitsResponse,
	RoleGetClaimsData,
	RoleGetClaimsError,
	RoleGetClaimsResponse,
	RoleAddClaimData,
	RoleAddClaimError,
	RoleAddClaimResponse,
	RoleUpdateClaimData,
	RoleUpdateClaimError,
	RoleUpdateClaimResponse,
	RoleDeleteClaimData,
	RoleDeleteClaimError,
	RoleDeleteClaimResponse,
	RoleGetAllListData,
	RoleGetAllListError,
	RoleGetAllListResponse,
	RoleGetListData,
	RoleGetListError,
	RoleGetListResponse,
	RoleCreateData,
	RoleCreateError,
	RoleCreateResponse,
	RoleGetData,
	RoleGetError,
	RoleGetResponse,
	RoleUpdateData,
	RoleUpdateError,
	RoleUpdateResponse,
	RoleDeleteData,
	RoleDeleteError,
	RoleDeleteResponse,
	RoleEntityRuleGetData,
	RoleEntityRuleGetError,
	RoleEntityRuleGetResponse,
	RoleEntityRuleCreateData,
	RoleEntityRuleCreateError,
	RoleEntityRuleCreateResponse,
	RoleEntityRuleUpdateData,
	RoleEntityRuleUpdateError,
	RoleEntityRuleUpdateResponse,
	SecurityLogDeleteData,
	SecurityLogDeleteError,
	SecurityLogDeleteResponse,
	SecurityLogGetData,
	SecurityLogGetError,
	SecurityLogGetResponse,
	SecurityLogGetListData,
	SecurityLogGetListError,
	SecurityLogGetListResponse,
	SettingSetCurrentTenantData,
	SettingSetCurrentTenantError,
	SettingSetCurrentTenantResponse,
	SettingSetGlobalData,
	SettingSetGlobalError,
	SettingSetGlobalResponse,
	SettingGetAllForGlobalData,
	SettingGetAllForGlobalError,
	SettingGetAllForGlobalResponse,
	SettingGetAllForCurrentTenantData,
	SettingGetAllForCurrentTenantError,
	SettingGetAllForCurrentTenantResponse,
	SettingSendTestEmailData,
	SettingSendTestEmailError,
	SettingSendTestEmailResponse,
	SettingDefinitionCreateData,
	SettingDefinitionCreateError,
	SettingDefinitionCreateResponse,
	SettingDefinitionGetListData,
	SettingDefinitionGetListError,
	SettingDefinitionGetListResponse,
	SettingDefinitionDeleteOrRestoreData,
	SettingDefinitionDeleteOrRestoreError,
	SettingDefinitionDeleteOrRestoreResponse,
	SettingDefinitionGetData,
	SettingDefinitionGetError,
	SettingDefinitionGetResponse,
	SettingDefinitionUpdateData,
	SettingDefinitionUpdateError,
	SettingDefinitionUpdateResponse,
	StaticFilesUploadData,
	StaticFilesUploadError,
	StaticFilesUploadResponse,
	StaticFilesGetData,
	StaticFilesGetError,
	StaticFilesGetResponse,
	StaticFilesGet1Data,
	StaticFilesGet1Error,
	StaticFilesGet1Response,
	StaticFilesGet2Data,
	StaticFilesGet2Error,
	StaticFilesGet2Response,
	StaticFilesGet3Data,
	StaticFilesGet3Error,
	StaticFilesGet3Response,
	StaticFilesGet4Data,
	StaticFilesGet4Error,
	StaticFilesGet4Response,
	StaticFilesGet5Data,
	StaticFilesGet5Error,
	StaticFilesGet5Response,
	StaticFilesGet6Data,
	StaticFilesGet6Error,
	StaticFilesGet6Response,
	StaticFilesGet7Data,
	StaticFilesGet7Error,
	StaticFilesGet7Response,
	TenantGetData,
	TenantGetError,
	TenantGetResponse,
	TenantUpdateData,
	TenantUpdateError,
	TenantUpdateResponse,
	TenantDeleteData,
	TenantDeleteError,
	TenantDeleteResponse,
	TenantGet1Data,
	TenantGet1Error,
	TenantGet1Response,
	TenantGetListData,
	TenantGetListError,
	TenantGetListResponse,
	TenantCreateData,
	TenantCreateError,
	TenantCreateResponse,
	TenantGetConnectionStringData,
	TenantGetConnectionStringError,
	TenantGetConnectionStringResponse,
	TenantDeleteConnectionStringData,
	TenantDeleteConnectionStringError,
	TenantDeleteConnectionStringResponse,
	TenantGetConnectionString1Data,
	TenantGetConnectionString1Error,
	TenantGetConnectionString1Response,
	TenantSetConnectionStringData,
	TenantSetConnectionStringError,
	TenantSetConnectionStringResponse,
	TextSetTextData,
	TextSetTextError,
	TextSetTextResponse,
	TextRestoreToDefaultData,
	TextRestoreToDefaultError,
	TextRestoreToDefaultResponse,
	TextGetByCultureKeyData,
	TextGetByCultureKeyError,
	TextGetByCultureKeyResponse,
	TextGetListData,
	TextGetListError,
	TextGetListResponse,
	TextTemplateContentGetData,
	TextTemplateContentGetError,
	TextTemplateContentGetResponse,
	TextTemplateContentGet1Data,
	TextTemplateContentGet1Error,
	TextTemplateContentGet1Response,
	TextTemplateContentRestoreToDefaultData,
	TextTemplateContentRestoreToDefaultError,
	TextTemplateContentRestoreToDefaultResponse,
	TextTemplateContentUpdateData,
	TextTemplateContentUpdateError,
	TextTemplateContentUpdateResponse,
	TextTemplateDefinitionCreateData,
	TextTemplateDefinitionCreateError,
	TextTemplateDefinitionCreateResponse,
	TextTemplateDefinitionGetListData,
	TextTemplateDefinitionGetListError,
	TextTemplateDefinitionGetListResponse,
	TextTemplateDefinitionDeleteData,
	TextTemplateDefinitionDeleteError,
	TextTemplateDefinitionDeleteResponse,
	TextTemplateDefinitionGetByNameData,
	TextTemplateDefinitionGetByNameError,
	TextTemplateDefinitionGetByNameResponse,
	TextTemplateDefinitionUpdateData,
	TextTemplateDefinitionUpdateError,
	TextTemplateDefinitionUpdateResponse,
	ThemeSettingGetData,
	ThemeSettingGetError,
	ThemeSettingGetResponse,
	ThemeSettingChangeData,
	ThemeSettingChangeError,
	ThemeSettingChangeResponse,
	TriggerHandleData,
	TriggerHandleError,
	TriggerHandleResponse,
	TriggerEndpointHandleData,
	TriggerEndpointHandleError,
	TriggerEndpointHandleResponse,
	TriggerEndpointHandle1Data,
	TriggerEndpointHandle1Error,
	TriggerEndpointHandle1Response,
	UserGetOrganizationUnitsData,
	UserGetOrganizationUnitsError,
	UserGetOrganizationUnitsResponse,
	UserSetOrganizationUnitsData,
	UserSetOrganizationUnitsError,
	UserSetOrganizationUnitsResponse,
	UserRemoveOrganizationUnitsData,
	UserRemoveOrganizationUnitsError,
	UserRemoveOrganizationUnitsResponse,
	UserGetClaimsData,
	UserGetClaimsError,
	UserGetClaimsResponse,
	UserAddClaimData,
	UserAddClaimError,
	UserAddClaimResponse,
	UserUpdateClaimData,
	UserUpdateClaimError,
	UserUpdateClaimResponse,
	UserDeleteClaimData,
	UserDeleteClaimError,
	UserDeleteClaimResponse,
	UserChangePasswordData,
	UserChangePasswordError,
	UserChangePasswordResponse,
	UserChangeTwoFactorEnabledData,
	UserChangeTwoFactorEnabledError,
	UserChangeTwoFactorEnabledResponse,
	UserLockData,
	UserLockError,
	UserLockResponse,
	UserUnLockData,
	UserUnLockError,
	UserUnLockResponse,
	UserGetData,
	UserGetError,
	UserGetResponse,
	UserUpdateData,
	UserUpdateError,
	UserUpdateResponse,
	UserDeleteData,
	UserDeleteError,
	UserDeleteResponse,
	UserGetListData,
	UserGetListError,
	UserGetListResponse,
	UserCreateData,
	UserCreateError,
	UserCreateResponse,
	UserGetRolesData,
	UserGetRolesError,
	UserGetRolesResponse,
	UserUpdateRolesData,
	UserUpdateRolesError,
	UserUpdateRolesResponse,
	UserGetAssignableRolesData,
	UserGetAssignableRolesError,
	UserGetAssignableRolesResponse,
	UserFindByUsernameData,
	UserFindByUsernameError,
	UserFindByUsernameResponse,
	UserFindByEmailData,
	UserFindByEmailError,
	UserFindByEmailResponse,
	UserFavoriteMenuCreateData,
	UserFavoriteMenuCreateError,
	UserFavoriteMenuCreateResponse,
	UserFavoriteMenuGetListData,
	UserFavoriteMenuGetListError,
	UserFavoriteMenuGetListResponse,
	UserFavoriteMenuUpdateData,
	UserFavoriteMenuUpdateError,
	UserFavoriteMenuUpdateResponse,
	UserFavoriteMenuCreateMyFavoriteMenuData,
	UserFavoriteMenuCreateMyFavoriteMenuError,
	UserFavoriteMenuCreateMyFavoriteMenuResponse,
	UserFavoriteMenuGetMyFavoriteMenuListData,
	UserFavoriteMenuGetMyFavoriteMenuListError,
	UserFavoriteMenuGetMyFavoriteMenuListResponse,
	UserFavoriteMenuUpdateMyFavoriteMenuData,
	UserFavoriteMenuUpdateMyFavoriteMenuError,
	UserFavoriteMenuUpdateMyFavoriteMenuResponse,
	UserFavoriteMenuDeleteData,
	UserFavoriteMenuDeleteError,
	UserFavoriteMenuDeleteResponse,
	UserFavoriteMenuDeleteMyFavoriteMenuData,
	UserFavoriteMenuDeleteMyFavoriteMenuError,
	UserFavoriteMenuDeleteMyFavoriteMenuResponse,
	UserGroupApplyJoinGroupData,
	UserGroupApplyJoinGroupError,
	UserGroupApplyJoinGroupResponse,
	UserGroupGetGroupUsersData,
	UserGroupGetGroupUsersError,
	UserGroupGetGroupUsersResponse,
	UserGroupGetMyGroupsData,
	UserGroupGetMyGroupsError,
	UserGroupGetMyGroupsResponse,
	UserGroupGroupAcceptUserData,
	UserGroupGroupAcceptUserError,
	UserGroupGroupAcceptUserResponse,
	UserGroupGroupRemoveUserData,
	UserGroupGroupRemoveUserError,
	UserGroupGroupRemoveUserResponse,
	UserLookupFindByIdData,
	UserLookupFindByIdError,
	UserLookupFindByIdResponse,
	UserLookupFindByUserNameData,
	UserLookupFindByUserNameError,
	UserLookupFindByUserNameResponse,
	UserLookupSearchData,
	UserLookupSearchError,
	UserLookupSearchResponse,
	UserLookupGetCountData,
	UserLookupGetCountError,
	UserLookupGetCountResponse,
	UserSettingGetAllForCurrentUserData,
	UserSettingGetAllForCurrentUserError,
	UserSettingGetAllForCurrentUserResponse,
	UserSettingSetCurrentUserData,
	UserSettingSetCurrentUserError,
	UserSettingSetCurrentUserResponse,
	WebhookDefinitionCreateData,
	WebhookDefinitionCreateError,
	WebhookDefinitionCreateResponse,
	WebhookDefinitionGetListData,
	WebhookDefinitionGetListError,
	WebhookDefinitionGetListResponse,
	WebhookDefinitionDeleteData,
	WebhookDefinitionDeleteError,
	WebhookDefinitionDeleteResponse,
	WebhookDefinitionGetData,
	WebhookDefinitionGetError,
	WebhookDefinitionGetResponse,
	WebhookDefinitionUpdateData,
	WebhookDefinitionUpdateError,
	WebhookDefinitionUpdateResponse,
	WebhookGroupDefinitionCreateData,
	WebhookGroupDefinitionCreateError,
	WebhookGroupDefinitionCreateResponse,
	WebhookGroupDefinitionGetListData,
	WebhookGroupDefinitionGetListError,
	WebhookGroupDefinitionGetListResponse,
	WebhookGroupDefinitionDeleteAysncData,
	WebhookGroupDefinitionDeleteAysncError,
	WebhookGroupDefinitionDeleteAysncResponse,
	WebhookGroupDefinitionGetData,
	WebhookGroupDefinitionGetError,
	WebhookGroupDefinitionGetResponse,
	WebhookGroupDefinitionUpdateData,
	WebhookGroupDefinitionUpdateError,
	WebhookGroupDefinitionUpdateResponse,
	WebhookPublishPublishData,
	WebhookPublishPublishError,
	WebhookPublishPublishResponse,
	WebhookSendRecordGetData,
	WebhookSendRecordGetError,
	WebhookSendRecordGetResponse,
	WebhookSendRecordDeleteData,
	WebhookSendRecordDeleteError,
	WebhookSendRecordDeleteResponse,
	WebhookSendRecordDeleteManyData,
	WebhookSendRecordDeleteManyError,
	WebhookSendRecordDeleteManyResponse,
	WebhookSendRecordGetListData,
	WebhookSendRecordGetListError,
	WebhookSendRecordGetListResponse,
	WebhookSendRecordResendData,
	WebhookSendRecordResendError,
	WebhookSendRecordResendResponse,
	WebhookSendRecordResendManyData,
	WebhookSendRecordResendManyError,
	WebhookSendRecordResendManyResponse,
	WebhookSubscriptionCreateData,
	WebhookSubscriptionCreateError,
	WebhookSubscriptionCreateResponse,
	WebhookSubscriptionGetListData,
	WebhookSubscriptionGetListError,
	WebhookSubscriptionGetListResponse,
	WebhookSubscriptionDeleteData,
	WebhookSubscriptionDeleteError,
	WebhookSubscriptionDeleteResponse,
	WebhookSubscriptionGetData,
	WebhookSubscriptionGetError,
	WebhookSubscriptionGetResponse,
	WebhookSubscriptionUpdateData,
	WebhookSubscriptionUpdateError,
	WebhookSubscriptionUpdateResponse,
	WebhookSubscriptionDeleteManyData,
	WebhookSubscriptionDeleteManyError,
	WebhookSubscriptionDeleteManyResponse,
	WebhookSubscriptionGetAllAvailableWebhooksData,
	WebhookSubscriptionGetAllAvailableWebhooksError,
	WebhookSubscriptionGetAllAvailableWebhooksResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AbpApiDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, ThrowOnError>({
		...options,
		url: "/api/abp/api-definition",
	});
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AbpApplicationConfigurationGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AbpApplicationConfigurationGetResponse,
		AbpApplicationConfigurationGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/abp/application-configuration",
	});
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AbpApplicationLocalizationGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AbpApplicationLocalizationGetResponse,
		AbpApplicationLocalizationGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/abp/application-localization",
	});
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AbpTenantFindTenantByNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AbpTenantFindTenantByNameResponse,
		AbpTenantFindTenantByNameError,
		ThrowOnError
	>({
		...options,
		url: "/api/abp/multi-tenancy/tenants/by-name/{name}",
	});
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AbpTenantFindTenantByIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, ThrowOnError>({
		...options,
		url: "/api/abp/multi-tenancy/tenants/by-id/{id}",
	});
};

export const accountRegister = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountRegisterData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
		...options,
		url: "/api/account/phone/register",
	});
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountResetPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<AccountResetPasswordResponse, AccountResetPasswordError, ThrowOnError>({
		...options,
		url: "/api/account/phone/reset-password",
	});
};

export const accountSendPhoneSigninCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountSendPhoneSigninCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountSendPhoneSigninCodeResponse,
		AccountSendPhoneSigninCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/phone/send-signin-code",
	});
};

export const accountSendEmailSigninCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountSendEmailSigninCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountSendEmailSigninCodeResponse,
		AccountSendEmailSigninCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/email/send-signin-code",
	});
};

export const accountSendPhoneRegisterCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountSendPhoneRegisterCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountSendPhoneRegisterCodeResponse,
		AccountSendPhoneRegisterCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/phone/send-register-code",
	});
};

export const accountSendPhoneResetPasswordCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountSendPhoneResetPasswordCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountSendPhoneResetPasswordCodeResponse,
		AccountSendPhoneResetPasswordCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/phone/send-password-reset-code",
	});
};

export const accountGetTwoFactorProviders = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AccountGetTwoFactorProvidersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AccountGetTwoFactorProvidersResponse,
		AccountGetTwoFactorProvidersError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/two-factor-providers",
	});
};

export const accountRegister1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountRegister1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<AccountRegister1Response, AccountRegister1Error, ThrowOnError>({
		...options,
		url: "/api/account/register",
	});
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountSendPasswordResetCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountSendPasswordResetCodeResponse,
		AccountSendPasswordResetCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/send-password-reset-code",
	});
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountVerifyPasswordResetTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AccountVerifyPasswordResetTokenResponse,
		AccountVerifyPasswordResetTokenError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/verify-password-reset-token",
	});
};

export const accountResetPassword1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AccountResetPassword1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<AccountResetPassword1Response, AccountResetPassword1Error, ThrowOnError>({
		...options,
		url: "/api/account/reset-password",
	});
};

export const auditLogDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AuditLogDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<AuditLogDeleteResponse, AuditLogDeleteError, ThrowOnError>({
		...options,
		url: "/api/auditing/audit-log/{id}",
	});
};

export const auditLogGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<AuditLogGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<AuditLogGetResponse, AuditLogGetError, ThrowOnError>({
		...options,
		url: "/api/auditing/audit-log/{id}",
	});
};

export const auditLogGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<AuditLogGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<AuditLogGetListResponse, AuditLogGetListError, ThrowOnError>({
		...options,
		url: "/api/auditing/audit-log",
	});
};

export const backgroundJobActionAddAction = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobActionAddActionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		BackgroundJobActionAddActionResponse,
		BackgroundJobActionAddActionError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/actions/{jobId}",
	});
};

export const backgroundJobActionGetActions = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobActionGetActionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BackgroundJobActionGetActionsResponse,
		BackgroundJobActionGetActionsError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/actions/{jobId}",
	});
};

export const backgroundJobActionDeleteAction = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobActionDeleteActionData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		BackgroundJobActionDeleteActionResponse,
		BackgroundJobActionDeleteActionError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/actions/{id}",
	});
};

export const backgroundJobActionUpdateAction = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobActionUpdateActionData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobActionUpdateActionResponse,
		BackgroundJobActionUpdateActionError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/actions/{id}",
	});
};

export const backgroundJobActionGetDefinitions = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobActionGetDefinitionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BackgroundJobActionGetDefinitionsResponse,
		BackgroundJobActionGetDefinitionsError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/actions/definitions",
	});
};

export const backgroundJobInfoCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<BackgroundJobInfoCreateResponse, BackgroundJobInfoCreateError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs",
	});
};

export const backgroundJobInfoGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<BackgroundJobInfoGetListResponse, BackgroundJobInfoGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/task-management/background-jobs",
		},
	);
};

export const backgroundJobInfoDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		BackgroundJobInfoDeleteResponse,
		BackgroundJobInfoDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/{id}",
	});
};

export const backgroundJobInfoGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<BackgroundJobInfoGetResponse, BackgroundJobInfoGetError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}",
	});
};

export const backgroundJobInfoUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoUpdateResponse, BackgroundJobInfoUpdateError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}",
	});
};

export const backgroundJobInfoPause = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoPauseData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoPauseResponse, BackgroundJobInfoPauseError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}/pause",
	});
};

export const backgroundJobInfoResume = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoResumeData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoResumeResponse, BackgroundJobInfoResumeError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}/resume",
	});
};

export const backgroundJobInfoTrigger = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoTriggerData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoTriggerResponse, BackgroundJobInfoTriggerError, ThrowOnError>(
		{
			...options,
			url: "/api/task-management/background-jobs/{id}/trigger",
		},
	);
};

export const backgroundJobInfoStop = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoStopData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoStopResponse, BackgroundJobInfoStopError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}/stop",
	});
};

export const backgroundJobInfoStart = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobInfoStartData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<BackgroundJobInfoStartResponse, BackgroundJobInfoStartError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/{id}/start",
	});
};

export const backgroundJobInfoBulkStop = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkStopData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobInfoBulkStopResponse,
		BackgroundJobInfoBulkStopError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-stop",
	});
};

export const backgroundJobInfoBulkStart = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkStartData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobInfoBulkStartResponse,
		BackgroundJobInfoBulkStartError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-start",
	});
};

export const backgroundJobInfoBulkTrigger = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkTriggerData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobInfoBulkTriggerResponse,
		BackgroundJobInfoBulkTriggerError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-trigger",
	});
};

export const backgroundJobInfoBulkResume = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkResumeData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobInfoBulkResumeResponse,
		BackgroundJobInfoBulkResumeError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-resume",
	});
};

export const backgroundJobInfoBulkPause = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkPauseData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		BackgroundJobInfoBulkPauseResponse,
		BackgroundJobInfoBulkPauseError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-pause",
	});
};

export const backgroundJobInfoBulkDelete = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoBulkDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		BackgroundJobInfoBulkDeleteResponse,
		BackgroundJobInfoBulkDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/bulk-delete",
	});
};

export const backgroundJobInfoGetDefinitions = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoGetDefinitionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BackgroundJobInfoGetDefinitionsResponse,
		BackgroundJobInfoGetDefinitionsError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/definitions",
	});
};

export const backgroundJobInfoGetAvailableFields = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoGetAvailableFieldsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		BackgroundJobInfoGetAvailableFieldsResponse,
		BackgroundJobInfoGetAvailableFieldsError,
		ThrowOnError
	>({
		...options,
		url: "/api/task-management/background-jobs/available-fields",
	});
};

export const backgroundJobInfoSearch = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobInfoSearchData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<BackgroundJobInfoSearchResponse, BackgroundJobInfoSearchError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/search",
	});
};

export const backgroundJobLogDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobLogDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<BackgroundJobLogDeleteResponse, BackgroundJobLogDeleteError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/logs/{id}",
	});
};

export const backgroundJobLogGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackgroundJobLogGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<BackgroundJobLogGetResponse, BackgroundJobLogGetError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/logs/{id}",
	});
};

export const backgroundJobLogGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<BackgroundJobLogGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<BackgroundJobLogGetListResponse, BackgroundJobLogGetListError, ThrowOnError>({
		...options,
		url: "/api/task-management/background-jobs/logs",
	});
};

export const backupHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BackupHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<BackupHandleResponse, BackupHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/backup",
	});
};

export const bulkCancelHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BulkCancelHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<BulkCancelHandleResponse, BulkCancelHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/bulk/cancel",
	});
};

export const bulkDeleteHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BulkDeleteHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<BulkDeleteHandleResponse, BulkDeleteHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/bulk",
	});
};

export const bulkRetryHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<BulkRetryHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<BulkRetryHandleResponse, BulkRetryHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/bulk/retry",
	});
};

export const cacheGetKeys = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<CacheGetKeysData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<CacheGetKeysResponse, CacheGetKeysError, ThrowOnError>({
		...options,
		url: "/api/caching-management/cache/keys",
	});
};

export const cacheGetValue = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<CacheGetValueData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<CacheGetValueResponse, CacheGetValueError, ThrowOnError>({
		...options,
		url: "/api/caching-management/cache/value",
	});
};

export const cacheSet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<CacheSetData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<CacheSetResponse, CacheSetError, ThrowOnError>({
		...options,
		url: "/api/caching-management/cache/set",
	});
};

export const cacheRefresh = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<CacheRefreshData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<CacheRefreshResponse, CacheRefreshError, ThrowOnError>({
		...options,
		url: "/api/caching-management/cache/refresh",
	});
};

export const cacheRemove = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<CacheRemoveData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<CacheRemoveResponse, CacheRemoveError, ThrowOnError>({
		...options,
		url: "/api/caching-management/cache/remove",
	});
};

export const cancelHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<CancelHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<CancelHandleResponse, CancelHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{id}/cancel",
	});
};

export const chatGetMyGroupMessage = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ChatGetMyGroupMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ChatGetMyGroupMessageResponse, ChatGetMyGroupMessageError, ThrowOnError>({
		...options,
		url: "/api/im/chat/group/messages",
	});
};

export const chatGetMyChatMessage = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ChatGetMyChatMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ChatGetMyChatMessageResponse, ChatGetMyChatMessageError, ThrowOnError>({
		...options,
		url: "/api/im/chat/my-messages",
	});
};

export const chatGetMyLastChatMessage = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ChatGetMyLastChatMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ChatGetMyLastChatMessageResponse, ChatGetMyLastChatMessageError, ThrowOnError>(
		{
			...options,
			url: "/api/im/chat/my-last-messages",
		},
	);
};

export const chatSendMessage = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ChatSendMessageData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ChatSendMessageResponse, ChatSendMessageError, ThrowOnError>({
		...options,
		url: "/api/im/chat/send-message",
	});
};

export const claimChangeAvatar = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ClaimChangeAvatarData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ClaimChangeAvatarResponse, ClaimChangeAvatarError, ThrowOnError>({
		...options,
		url: "/api/account/my-claim/change-avatar",
	});
};

export const claimTypeCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ClaimTypeCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ClaimTypeCreateResponse, ClaimTypeCreateError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types",
	});
};

export const claimTypeGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ClaimTypeGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ClaimTypeGetListResponse, ClaimTypeGetListError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types",
	});
};

export const claimTypeDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ClaimTypeDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<ClaimTypeDeleteResponse, ClaimTypeDeleteError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types/{id}",
	});
};

export const claimTypeGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ClaimTypeGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ClaimTypeGetResponse, ClaimTypeGetError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types/{id}",
	});
};

export const claimTypeUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ClaimTypeUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ClaimTypeUpdateResponse, ClaimTypeUpdateError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types/{id}",
	});
};

export const claimTypeGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ClaimTypeGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ClaimTypeGetAllListResponse, ClaimTypeGetAllListError, ThrowOnError>({
		...options,
		url: "/api/identity/claim-types/actived-list",
	});
};

export const dataCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<DataCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DataCreateResponse, DataCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/datas",
	});
};

export const dataGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<DataGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<DataGetListResponse, DataGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/datas",
	});
};

export const dataCreateItem = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataCreateItemData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DataCreateItemResponse, DataCreateItemError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}/items",
	});
};

export const dataDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<DataDeleteResponse, DataDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}",
	});
};

export const dataGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<DataGetResponse, DataGetError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}",
	});
};

export const dataUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<DataUpdateResponse, DataUpdateError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}",
	});
};

export const dataDeleteItem = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataDeleteItemData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<DataDeleteItemResponse, DataDeleteItemError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}/items/{name}",
	});
};

export const dataUpdateItem = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataUpdateItemData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<DataUpdateItemResponse, DataUpdateItemError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}/items/{name}",
	});
};

export const dataGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<DataGet1Response, DataGet1Error, ThrowOnError>({
		...options,
		url: "/api/platform/datas/by-name/{name}",
	});
};

export const dataGetAll = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<DataGetAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<DataGetAllResponse, DataGetAllError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/all",
	});
};

export const dataMove = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DataMoveData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<DataMoveResponse, DataMoveError, ThrowOnError>({
		...options,
		url: "/api/platform/datas/{id}/move",
	});
};

export const deleteHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DeleteHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<DeleteHandleResponse, DeleteHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{id}",
	});
};

export const getHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandleResponse, GetHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{id}",
	});
};

export const deleteHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DeleteHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<DeleteHandle1Response, DeleteHandle1Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/webhook-definitions/{id}",
	});
};

export const getHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandle1Response, GetHandle1Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/webhook-definitions/{id}",
	});
};

export const deleteByDefinitionHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DeleteByDefinitionHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteByDefinitionHandleResponse,
		DeleteByDefinitionHandleError,
		ThrowOnError
	>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{definitionId}",
	});
};

export const deleteByDefinitionAndVersionHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DeleteByDefinitionAndVersionHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteByDefinitionAndVersionHandleResponse,
		DeleteByDefinitionAndVersionHandleError,
		ThrowOnError
	>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{definitionId}/{versionOptions}",
	});
};

export const dispatchHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DispatchHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DispatchHandleResponse, DispatchHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflows/{workflowDefinitionId}/dispatch",
	});
};

export const dispatchHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DispatchHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DispatchHandle1Response, DispatchHandle1Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{workflowInstanceId}/dispatch",
	});
};

export const dispatchHandle2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DispatchHandle2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DispatchHandle2Response, DispatchHandle2Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/signals/{signalName}/dispatch",
	});
};

export const dispatchEndpointHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DispatchEndpointHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<DispatchEndpointHandleResponse, DispatchEndpointHandleError, ThrowOnError>({
		...options,
		url: "/signals/dispatch/{token}",
	});
};

export const dispatchEndpointHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DispatchEndpointHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DispatchEndpointHandle1Response, DispatchEndpointHandle1Error, ThrowOnError>({
		...options,
		url: "/signals/dispatch/{token}",
	});
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<DynamicClaimsRefreshData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<DynamicClaimsRefreshResponse, DynamicClaimsRefreshError, ThrowOnError>({
		...options,
		url: "/api/account/dynamic-claims/refresh",
	});
};

export const editionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<EditionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<EditionCreateResponse, EditionCreateError, ThrowOnError>({
		...options,
		url: "/api/saas/editions",
	});
};

export const editionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<EditionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EditionGetListResponse, EditionGetListError, ThrowOnError>({
		...options,
		url: "/api/saas/editions",
	});
};

export const editionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EditionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<EditionDeleteResponse, EditionDeleteError, ThrowOnError>({
		...options,
		url: "/api/saas/editions/{id}",
	});
};

export const editionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EditionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EditionGetResponse, EditionGetError, ThrowOnError>({
		...options,
		url: "/api/saas/editions/{id}",
	});
};

export const editionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EditionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<EditionUpdateResponse, EditionUpdateError, ThrowOnError>({
		...options,
		url: "/api/saas/editions/{id}",
	});
};

export const entityChangesGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EntityChangesGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EntityChangesGetResponse, EntityChangesGetError, ThrowOnError>({
		...options,
		url: "/api/auditing/entity-changes/{id}",
	});
};

export const entityChangesGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<EntityChangesGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EntityChangesGetListResponse, EntityChangesGetListError, ThrowOnError>({
		...options,
		url: "/api/auditing/entity-changes",
	});
};

export const entityChangesGetWithUsername = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EntityChangesGetWithUsernameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		EntityChangesGetWithUsernameResponse,
		EntityChangesGetWithUsernameError,
		ThrowOnError
	>({
		...options,
		url: "/api/auditing/entity-changes/with-username/{id}",
	});
};

export const entityChangesGetWithUsername1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<EntityChangesGetWithUsername1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		EntityChangesGetWithUsername1Response,
		EntityChangesGetWithUsername1Error,
		ThrowOnError
	>({
		...options,
		url: "/api/auditing/entity-changes/with-username",
	});
};

export const entityTypeInfoGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<EntityTypeInfoGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EntityTypeInfoGetResponse, EntityTypeInfoGetError, ThrowOnError>({
		...options,
		url: "/api/data-protection-management/entity-type-infos/{id}",
	});
};

export const entityTypeInfoGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<EntityTypeInfoGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<EntityTypeInfoGetListResponse, EntityTypeInfoGetListError, ThrowOnError>({
		...options,
		url: "/api/data-protection-management/entity-type-infos",
	});
};

export const executeHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ExecuteHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ExecuteHandleResponse, ExecuteHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflows/{workflowDefinitionId}/execute",
	});
};

export const executeHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ExecuteHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ExecuteHandle1Response, ExecuteHandle1Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{workflowInstanceId}/execute",
	});
};

export const executeHandle2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ExecuteHandle2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ExecuteHandle2Response, ExecuteHandle2Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/signals/{signalName}/execute",
	});
};

export const exportHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ExportHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ExportHandleResponse, ExportHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{workflowDefinitionId}/{versionOptions}/export",
	});
};

export const featureDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeatureDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<FeatureDefinitionCreateResponse, FeatureDefinitionCreateError, ThrowOnError>({
		...options,
		url: "/api/feature-management/definitions",
	});
};

export const featureDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeatureDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeatureDefinitionGetListResponse, FeatureDefinitionGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/feature-management/definitions",
		},
	);
};

export const featureDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		FeatureDefinitionDeleteResponse,
		FeatureDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/{name}",
	});
};

export const featureDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeatureDefinitionGetResponse, FeatureDefinitionGetError, ThrowOnError>({
		...options,
		url: "/api/feature-management/definitions/{name}",
	});
};

export const featureDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<FeatureDefinitionUpdateResponse, FeatureDefinitionUpdateError, ThrowOnError>({
		...options,
		url: "/api/feature-management/definitions/{name}",
	});
};

export const featureGroupDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeatureGroupDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		FeatureGroupDefinitionCreateResponse,
		FeatureGroupDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/groups",
	});
};

export const featureGroupDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeatureGroupDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FeatureGroupDefinitionGetListResponse,
		FeatureGroupDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/groups",
	});
};

export const featureGroupDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureGroupDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		FeatureGroupDefinitionDeleteResponse,
		FeatureGroupDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/groups/{name}",
	});
};

export const featureGroupDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureGroupDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		FeatureGroupDefinitionGetResponse,
		FeatureGroupDefinitionGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/groups/{name}",
	});
};

export const featureGroupDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeatureGroupDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		FeatureGroupDefinitionUpdateResponse,
		FeatureGroupDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/feature-management/definitions/groups/{name}",
	});
};

export const featuresGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeaturesGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeaturesGetResponse, FeaturesGetError, ThrowOnError>({
		...options,
		url: "/api/feature-management/features",
	});
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeaturesUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<FeaturesUpdateResponse, FeaturesUpdateError, ThrowOnError>({
		...options,
		url: "/api/feature-management/features",
	});
};

export const featuresDelete = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeaturesDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<FeaturesDeleteResponse, FeaturesDeleteError, ThrowOnError>({
		...options,
		url: "/api/feature-management/features",
	});
};

export const feedbackCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeedbackCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<FeedbackCreateResponse, FeedbackCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/feedbacks",
	});
};

export const feedbackGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeedbackGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeedbackGetListResponse, FeedbackGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/feedbacks",
	});
};

export const feedbackDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeedbackDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<FeedbackDeleteResponse, FeedbackDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/feedbacks/{id}",
	});
};

export const feedbackGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeedbackGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeedbackGetResponse, FeedbackGetError, ThrowOnError>({
		...options,
		url: "/api/platform/feedbacks/{id}",
	});
};

export const feedbackAttachmentGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeedbackAttachmentGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<FeedbackAttachmentGetResponse, FeedbackAttachmentGetError, ThrowOnError>({
		...options,
		url: "/api/platform/feedbacks/{FeedbackId}/attachments/{Name}",
	});
};

export const feedbackAttachmentDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<FeedbackAttachmentDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		FeedbackAttachmentDeleteResponse,
		FeedbackAttachmentDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/feedbacks/{FeedbackId}/attachments/{Name}",
	});
};

export const feedbackAttachmentUpload = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<FeedbackAttachmentUploadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		FeedbackAttachmentUploadResponse,
		FeedbackAttachmentUploadError,
		ThrowOnError
	>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/platform/feedbacks/attachments/upload",
	});
};

export const getHandle2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandle2Response, GetHandle2Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-registry/{id}/{versionOptions}",
	});
};

export const getHandle3 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandle3Response, GetHandle3Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{id}/execution-log",
	});
};

export const getHandle4 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle4Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandle4Response, GetHandle4Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/version",
	});
};

export const getHandle5 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle5Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<GetHandle5Response, GetHandle5Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/scripting/javascript/type-definitions/{workflowDefinitionId}",
	});
};

export const getHandle6 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle6Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<GetHandle6Response, GetHandle6Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/designer/runtime-select-list",
	});
};

export const getHandle7 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetHandle7Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetHandle7Response, GetHandle7Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{workflowInstanceId}/activity-stats/{activityId}",
	});
};

export const getByDefinitionAndVersionHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetByDefinitionAndVersionHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetByDefinitionAndVersionHandleResponse,
		GetByDefinitionAndVersionHandleError,
		ThrowOnError
	>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{workflowDefinitionId}/{versionOptions}",
	});
};

export const getByVersionIdHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GetByVersionIdHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GetByVersionIdHandleResponse, GetByVersionIdHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{versionId}",
	});
};

export const groupGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<GroupGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GroupGetResponse, GroupGetError, ThrowOnError>({
		...options,
		url: "/api/im/groups/{groupId}",
	});
};

export const groupSearch = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<GroupSearchData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<GroupSearchResponse, GroupSearchError, ThrowOnError>({
		...options,
		url: "/api/im/groups/search",
	});
};

export const historyHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<HistoryHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<HistoryHandleResponse, HistoryHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{definitionId}/history",
	});
};

export const identitySessionsGetSessions = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<IdentitySessionsGetSessionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		IdentitySessionsGetSessionsResponse,
		IdentitySessionsGetSessionsError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/sessions",
	});
};

export const identitySessionsRevokeSession = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<IdentitySessionsRevokeSessionData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		IdentitySessionsRevokeSessionResponse,
		IdentitySessionsRevokeSessionError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/sessions/{sessionId}/revoke",
	});
};

export const importHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ImportHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ImportHandleResponse, ImportHandleError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/v{apiVersion}/workflow-definitions/{workflowDefinitionId}/import",
	});
};

export const languageGetByName = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LanguageGetByNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LanguageGetByNameResponse, LanguageGetByNameError, ThrowOnError>({
		...options,
		url: "/api/localization/languages/{name}",
	});
};

export const languageDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LanguageDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<LanguageDeleteResponse, LanguageDeleteError, ThrowOnError>({
		...options,
		url: "/api/localization/languages/{name}",
	});
};

export const languageUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LanguageUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<LanguageUpdateResponse, LanguageUpdateError, ThrowOnError>({
		...options,
		url: "/api/localization/languages/{name}",
	});
};

export const languageCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LanguageCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<LanguageCreateResponse, LanguageCreateError, ThrowOnError>({
		...options,
		url: "/api/localization/languages",
	});
};

export const languageGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LanguageGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LanguageGetListResponse, LanguageGetListError, ThrowOnError>({
		...options,
		url: "/api/abp/localization/languages",
	});
};

export const layoutCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LayoutCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<LayoutCreateResponse, LayoutCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts",
	});
};

export const layoutGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LayoutGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LayoutGetListResponse, LayoutGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts",
	});
};

export const layoutDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LayoutDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<LayoutDeleteResponse, LayoutDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts/{id}",
	});
};

export const layoutGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LayoutGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LayoutGetResponse, LayoutGetError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts/{id}",
	});
};

export const layoutUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LayoutUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<LayoutUpdateResponse, LayoutUpdateError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts/{id}",
	});
};

export const layoutGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LayoutGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LayoutGetAllListResponse, LayoutGetAllListError, ThrowOnError>({
		...options,
		url: "/api/platform/layouts/all",
	});
};

export const listHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandleResponse, ListHandleError, ThrowOnError>({
		...options,
		url: "/v{version}/workflow-storage-providers",
	});
};

export const listHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle1Response, ListHandle1Error, ThrowOnError>({
		...options,
		url: "/v{version}/workflow-providers",
	});
};

export const listHandle2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle2Response, ListHandle2Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances",
	});
};

export const listHandle3 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle3Response, ListHandle3Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions",
	});
};

export const saveHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SaveHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<SaveHandleResponse, SaveHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions",
	});
};

export const listHandle4 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle4Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle4Response, ListHandle4Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-channels",
	});
};

export const listHandle5 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle5Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle5Response, ListHandle5Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/features",
	});
};

export const listHandle6 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle6Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle6Response, ListHandle6Error, ThrowOnError>({
		...options,
		url: "/v{version}/activities",
	});
};

export const listHandle7 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListHandle7Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListHandle7Response, ListHandle7Error, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/webhook-definitions",
	});
};

export const postHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PostHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PostHandleResponse, PostHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/webhook-definitions",
	});
};

export const updateHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UpdateHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UpdateHandleResponse, UpdateHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/webhook-definitions",
	});
};

export const listAllHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListAllHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListAllHandleResponse, ListAllHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-registry",
	});
};

export const listByDefinitionVersionIdsHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListByDefinitionVersionIdsHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ListByDefinitionVersionIdsHandleResponse,
		ListByDefinitionVersionIdsHandleError,
		ThrowOnError
	>({
		...options,
		url: "/v{apiVersion}/workflow-registry/by-definition-version-ids",
	});
};

export const listByProviderHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ListByProviderHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ListByProviderHandleResponse, ListByProviderHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-registry/by-provider/{providerName}",
	});
};

export const loggingGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LoggingGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LoggingGetResponse, LoggingGetError, ThrowOnError>({
		...options,
		url: "/api/auditing/logging/{id}",
	});
};

export const loggingGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LoggingGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LoggingGetListResponse, LoggingGetListError, ThrowOnError>({
		...options,
		url: "/api/auditing/logging",
	});
};

export const loginLogin = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LoginLoginData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<LoginLoginResponse, LoginLoginError, ThrowOnError>({
		...options,
		url: "/api/account/login",
	});
};

export const loginLogout = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LoginLogoutData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<LoginLogoutResponse, LoginLogoutError, ThrowOnError>({
		...options,
		url: "/api/account/logout",
	});
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<LoginCheckPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<LoginCheckPasswordResponse, LoginCheckPasswordError, ThrowOnError>({
		...options,
		url: "/api/account/check-password",
	});
};

export const menuGetCurrentUserMenuList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuGetCurrentUserMenuListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		MenuGetCurrentUserMenuListResponse,
		MenuGetCurrentUserMenuListError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/menus/by-current-user",
	});
};

export const menuGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetResponse, MenuGetError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/{id}",
	});
};

export const menuUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<MenuUpdateResponse, MenuUpdateError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/{id}",
	});
};

export const menuDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<MenuDeleteResponse, MenuDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/{id}",
	});
};

export const menuGetAll = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuGetAllData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetAllResponse, MenuGetAllError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/all",
	});
};

export const menuGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetListResponse, MenuGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/menus",
	});
};

export const menuCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<MenuCreateResponse, MenuCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/menus",
	});
};

export const menuSetUserMenus = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuSetUserMenusData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<MenuSetUserMenusResponse, MenuSetUserMenusError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-user",
	});
};

export const menuGetUserMenuList = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuGetUserMenuListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetUserMenuListResponse, MenuGetUserMenuListError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-user",
	});
};

export const menuSetUserStartup = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuSetUserStartupData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<MenuSetUserStartupResponse, MenuSetUserStartupError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/startup/{id}/by-user",
	});
};

export const menuGetUserMenuList1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuGetUserMenuList1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetUserMenuList1Response, MenuGetUserMenuList1Error, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-user/{userId}/{framework}",
	});
};

export const menuSetRoleMenus = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MenuSetRoleMenusData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<MenuSetRoleMenusResponse, MenuSetRoleMenusError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-role",
	});
};

export const menuGetRoleMenuList = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuGetRoleMenuListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetRoleMenuListResponse, MenuGetRoleMenuListError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-role",
	});
};

export const menuSetRoleStartup = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuSetRoleStartupData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<MenuSetRoleStartupResponse, MenuSetRoleStartupError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/startup/{id}/by-role",
	});
};

export const menuGetRoleMenuList1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MenuGetRoleMenuList1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MenuGetRoleMenuList1Response, MenuGetRoleMenuList1Error, ThrowOnError>({
		...options,
		url: "/api/platform/menus/by-role/{role}/{framework}",
	});
};

export const myFeedbackGetMyFeedbacks = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyFeedbackGetMyFeedbacksData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyFeedbackGetMyFeedbacksResponse, MyFeedbackGetMyFeedbacksError, ThrowOnError>(
		{
			...options,
			url: "/api/platform/my-feedbacks",
		},
	);
};

export const myFriendCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyFriendCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<MyFriendCreateResponse, MyFriendCreateError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends",
	});
};

export const myFriendDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MyFriendDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<MyFriendDeleteResponse, MyFriendDeleteError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends",
	});
};

export const myFriendGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyFriendGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyFriendGetListResponse, MyFriendGetListError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends",
	});
};

export const myFriendAddRequest = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyFriendAddRequestData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<MyFriendAddRequestResponse, MyFriendAddRequestError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends/add-request",
	});
};

export const myFriendGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MyFriendGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyFriendGetResponse, MyFriendGetError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends/{friendId}",
	});
};

export const myFriendGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyFriendGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyFriendGetAllListResponse, MyFriendGetAllListError, ThrowOnError>({
		...options,
		url: "/api/im/my-friends/all",
	});
};

export const myNotificationMarkReadState = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyNotificationMarkReadStateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		MyNotificationMarkReadStateResponse,
		MyNotificationMarkReadStateError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/my-notifilers/mark-read-state",
	});
};

export const myNotificationDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MyNotificationDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<MyNotificationDeleteResponse, MyNotificationDeleteError, ThrowOnError>({
		...options,
		url: "/api/notifications/my-notifilers/{id}",
	});
};

export const myNotificationGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MyNotificationGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyNotificationGetResponse, MyNotificationGetError, ThrowOnError>({
		...options,
		url: "/api/notifications/my-notifilers/{id}",
	});
};

export const myNotificationGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MyNotificationGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MyNotificationGetListResponse, MyNotificationGetListError, ThrowOnError>({
		...options,
		url: "/api/notifications/my-notifilers",
	});
};

export const mySubscriptionGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MySubscriptionGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MySubscriptionGetAllListResponse, MySubscriptionGetAllListError, ThrowOnError>(
		{
			...options,
			url: "/api/notifications/my-subscribes/all",
		},
	);
};

export const mySubscriptionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MySubscriptionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<MySubscriptionGetListResponse, MySubscriptionGetListError, ThrowOnError>({
		...options,
		url: "/api/notifications/my-subscribes",
	});
};

export const mySubscriptionSubscribe = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<MySubscriptionSubscribeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<MySubscriptionSubscribeResponse, MySubscriptionSubscribeError, ThrowOnError>({
		...options,
		url: "/api/notifications/my-subscribes",
	});
};

export const mySubscriptionUnSubscribe = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MySubscriptionUnSubscribeData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		MySubscriptionUnSubscribeResponse,
		MySubscriptionUnSubscribeError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/my-subscribes",
	});
};

export const mySubscriptionIsSubscribed = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<MySubscriptionIsSubscribedData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		MySubscriptionIsSubscribedResponse,
		MySubscriptionIsSubscribedError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/my-subscribes/is-subscribed/{Name}",
	});
};

export const notificationSend = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationSendData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<NotificationSendResponse, NotificationSendError, ThrowOnError>({
		...options,
		url: "/api/notifications/send",
	});
};

export const notificationSend1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationSend1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<NotificationSend1Response, NotificationSend1Error, ThrowOnError>({
		...options,
		url: "/api/notifications/send/template",
	});
};

export const notificationGetAssignableNotifiers = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationGetAssignableNotifiersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationGetAssignableNotifiersResponse,
		NotificationGetAssignableNotifiersError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/assignables",
	});
};

export const notificationGetAssignableTemplates = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationGetAssignableTemplatesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationGetAssignableTemplatesResponse,
		NotificationGetAssignableTemplatesError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/assignable-templates",
	});
};

export const notificationDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		NotificationDefinitionCreateResponse,
		NotificationDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/notifications",
	});
};

export const notificationDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationDefinitionGetListResponse,
		NotificationDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/notifications",
	});
};

export const notificationDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		NotificationDefinitionDeleteResponse,
		NotificationDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/notifications/{name}",
	});
};

export const notificationDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationDefinitionGetResponse,
		NotificationDefinitionGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/notifications/{name}",
	});
};

export const notificationDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		NotificationDefinitionUpdateResponse,
		NotificationDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/notifications/{name}",
	});
};

export const notificationGroupDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationGroupDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		NotificationGroupDefinitionCreateResponse,
		NotificationGroupDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/groups",
	});
};

export const notificationGroupDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<NotificationGroupDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationGroupDefinitionGetListResponse,
		NotificationGroupDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/groups",
	});
};

export const notificationGroupDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationGroupDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		NotificationGroupDefinitionDeleteResponse,
		NotificationGroupDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/groups/{name}",
	});
};

export const notificationGroupDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationGroupDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		NotificationGroupDefinitionGetResponse,
		NotificationGroupDefinitionGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/groups/{name}",
	});
};

export const notificationGroupDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<NotificationGroupDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		NotificationGroupDefinitionUpdateResponse,
		NotificationGroupDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/notifications/definitions/groups/{name}",
	});
};

export const openIddictApplicationGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictApplicationGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OpenIddictApplicationGetResponse, OpenIddictApplicationGetError, ThrowOnError>(
		{
			...options,
			url: "/api/openiddict/applications/{id}",
		},
	);
};

export const openIddictApplicationUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictApplicationUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		OpenIddictApplicationUpdateResponse,
		OpenIddictApplicationUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/applications/{id}",
	});
};

export const openIddictApplicationDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictApplicationDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		OpenIddictApplicationDeleteResponse,
		OpenIddictApplicationDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/applications/{id}",
	});
};

export const openIddictApplicationGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictApplicationGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OpenIddictApplicationGetListResponse,
		OpenIddictApplicationGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/applications",
	});
};

export const openIddictApplicationCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictApplicationCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OpenIddictApplicationCreateResponse,
		OpenIddictApplicationCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/applications",
	});
};

export const openIddictAuthorizationDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictAuthorizationDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		OpenIddictAuthorizationDeleteResponse,
		OpenIddictAuthorizationDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/authorizations/{id}",
	});
};

export const openIddictAuthorizationGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictAuthorizationGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OpenIddictAuthorizationGetResponse,
		OpenIddictAuthorizationGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/authorizations/{id}",
	});
};

export const openIddictAuthorizationGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictAuthorizationGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OpenIddictAuthorizationGetListResponse,
		OpenIddictAuthorizationGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/openiddict/authorizations",
	});
};

export const openIddictScopeCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictScopeCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OpenIddictScopeCreateResponse, OpenIddictScopeCreateError, ThrowOnError>({
		...options,
		url: "/api/openiddict/scopes",
	});
};

export const openIddictScopeGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictScopeGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OpenIddictScopeGetListResponse, OpenIddictScopeGetListError, ThrowOnError>({
		...options,
		url: "/api/openiddict/scopes",
	});
};

export const openIddictScopeDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictScopeDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<OpenIddictScopeDeleteResponse, OpenIddictScopeDeleteError, ThrowOnError>({
		...options,
		url: "/api/openiddict/scopes/{id}",
	});
};

export const openIddictScopeGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictScopeGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OpenIddictScopeGetResponse, OpenIddictScopeGetError, ThrowOnError>({
		...options,
		url: "/api/openiddict/scopes/{id}",
	});
};

export const openIddictScopeUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictScopeUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<OpenIddictScopeUpdateResponse, OpenIddictScopeUpdateError, ThrowOnError>({
		...options,
		url: "/api/openiddict/scopes/{id}",
	});
};

export const openIddictTokenDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictTokenDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<OpenIddictTokenDeleteResponse, OpenIddictTokenDeleteError, ThrowOnError>({
		...options,
		url: "/api/openiddict/tokens/{id}",
	});
};

export const openIddictTokenGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OpenIddictTokenGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OpenIddictTokenGetResponse, OpenIddictTokenGetError, ThrowOnError>({
		...options,
		url: "/api/openiddict/tokens/{id}",
	});
};

export const openIddictTokenGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OpenIddictTokenGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OpenIddictTokenGetListResponse, OpenIddictTokenGetListError, ThrowOnError>({
		...options,
		url: "/api/openiddict/tokens",
	});
};

export const organizationUnitsCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitsCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OrganizationUnitsCreateResponse, OrganizationUnitsCreateError, ThrowOnError>({
		...options,
		url: "/api/identity/organization-units",
	});
};

export const organizationUnitsGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitsGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OrganizationUnitsGetListResponse, OrganizationUnitsGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/organization-units",
		},
	);
};

export const organizationUnitsDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		OrganizationUnitsDeleteResponse,
		OrganizationUnitsDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}",
	});
};

export const organizationUnitsGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OrganizationUnitsGetResponse, OrganizationUnitsGetError, ThrowOnError>({
		...options,
		url: "/api/identity/organization-units/{id}",
	});
};

export const organizationUnitsUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<OrganizationUnitsUpdateResponse, OrganizationUnitsUpdateError, ThrowOnError>({
		...options,
		url: "/api/identity/organization-units/{id}",
	});
};

export const organizationUnitsFindChildren = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsFindChildrenData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsFindChildrenResponse,
		OrganizationUnitsFindChildrenError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/find-children",
	});
};

export const organizationUnitsGetRoot = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitsGetRootData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OrganizationUnitsGetRootResponse, OrganizationUnitsGetRootError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/organization-units/root-node",
		},
	);
};

export const organizationUnitsGetLastChildOrNull = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitsGetLastChildOrNullData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetLastChildOrNullResponse,
		OrganizationUnitsGetLastChildOrNullError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/last-children",
	});
};

export const organizationUnitsGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitsGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetAllListResponse,
		OrganizationUnitsGetAllListError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/all",
	});
};

export const organizationUnitsGetRoleNames = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetRoleNamesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetRoleNamesResponse,
		OrganizationUnitsGetRoleNamesError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/role-names",
	});
};

export const organizationUnitsGetUnaddedRoles = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetUnaddedRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetUnaddedRolesResponse,
		OrganizationUnitsGetUnaddedRolesError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/unadded-roles",
	});
};

export const organizationUnitsGetRoles = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetRolesResponse,
		OrganizationUnitsGetRolesError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/roles",
	});
};

export const organizationUnitsAddRoles = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsAddRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OrganizationUnitsAddRolesResponse,
		OrganizationUnitsAddRolesError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/roles",
	});
};

export const organizationUnitsGetUnaddedUsers = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetUnaddedUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetUnaddedUsersResponse,
		OrganizationUnitsGetUnaddedUsersError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/unadded-users",
	});
};

export const organizationUnitsGetUsers = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsGetUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitsGetUsersResponse,
		OrganizationUnitsGetUsersError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/users",
	});
};

export const organizationUnitsAddUsers = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsAddUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OrganizationUnitsAddUsersResponse,
		OrganizationUnitsAddUsersError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/organization-units/{id}/users",
	});
};

export const organizationUnitsMove = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitsMoveData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<OrganizationUnitsMoveResponse, OrganizationUnitsMoveError, ThrowOnError>({
		...options,
		url: "/api/identity/organization-units/{id}/move",
	});
};

export const organizationUnitEntityRuleGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitEntityRuleGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OrganizationUnitEntityRuleGetResponse,
		OrganizationUnitEntityRuleGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/data-protection-management/entity-rule/organization-units",
	});
};

export const organizationUnitEntityRuleCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OrganizationUnitEntityRuleCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		OrganizationUnitEntityRuleCreateResponse,
		OrganizationUnitEntityRuleCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/data-protection-management/entity-rule/organization-units",
	});
};

export const organizationUnitEntityRuleUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OrganizationUnitEntityRuleUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		OrganizationUnitEntityRuleUpdateResponse,
		OrganizationUnitEntityRuleUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/data-protection-management/entity-rule/organization-units/{id}",
	});
};

export const ossContainerCreate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssContainerCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OssContainerCreateResponse, OssContainerCreateError, ThrowOnError>({
		...options,
		url: "/api/oss-management/containes/{name}",
	});
};

export const ossContainerDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssContainerDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<OssContainerDeleteResponse, OssContainerDeleteError, ThrowOnError>({
		...options,
		url: "/api/oss-management/containes/{name}",
	});
};

export const ossContainerGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssContainerGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OssContainerGetResponse, OssContainerGetError, ThrowOnError>({
		...options,
		url: "/api/oss-management/containes/{name}",
	});
};

export const ossContainerGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssContainerGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OssContainerGetListResponse, OssContainerGetListError, ThrowOnError>({
		...options,
		url: "/api/oss-management/containes",
	});
};

export const ossContainerGetObjectList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssContainerGetObjectListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OssContainerGetObjectListResponse,
		OssContainerGetObjectListError,
		ThrowOnError
	>({
		...options,
		url: "/api/oss-management/containes/objects",
	});
};

export const ossManagementSettingGetAllForCurrentTenant = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssManagementSettingGetAllForCurrentTenantData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OssManagementSettingGetAllForCurrentTenantResponse,
		OssManagementSettingGetAllForCurrentTenantError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/oss-management/by-current-tenant",
	});
};

export const ossManagementSettingGetAllForGlobal = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssManagementSettingGetAllForGlobalData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		OssManagementSettingGetAllForGlobalResponse,
		OssManagementSettingGetAllForGlobalError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/oss-management/by-global",
	});
};

export const ossObjectCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssObjectCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OssObjectCreateResponse, OssObjectCreateError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/oss-management/objects",
	});
};

export const ossObjectDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssObjectDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<OssObjectDeleteResponse, OssObjectDeleteError, ThrowOnError>({
		...options,
		url: "/api/oss-management/objects",
	});
};

export const ossObjectGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssObjectGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OssObjectGetResponse, OssObjectGetError, ThrowOnError>({
		...options,
		url: "/api/oss-management/objects",
	});
};

export const ossObjectUpload = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssObjectUploadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OssObjectUploadResponse, OssObjectUploadError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/oss-management/objects/upload",
	});
};

export const ossObjectBulkDelete = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<OssObjectBulkDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<OssObjectBulkDeleteResponse, OssObjectBulkDeleteError, ThrowOnError>({
		...options,
		url: "/api/oss-management/objects/bulk-delete",
	});
};

export const ossObjectGetContent = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<OssObjectGetContentData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<OssObjectGetContentResponse, OssObjectGetContentError, ThrowOnError>({
		...options,
		url: "/api/oss-management/objects/download",
	});
};

export const packageCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PackageCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PackageCreateResponse, PackageCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/packages",
	});
};

export const packageGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PackageGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PackageGetListResponse, PackageGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/packages",
	});
};

export const packageDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<PackageDeleteResponse, PackageDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{id}",
	});
};

export const packageGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PackageGetResponse, PackageGetError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{id}",
	});
};

export const packageUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<PackageUpdateResponse, PackageUpdateError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{id}",
	});
};

export const packageUploadBlob = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageUploadBlobData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PackageUploadBlobResponse, PackageUploadBlobError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/platform/packages/{id}/blob",
	});
};

export const packageRemoveBlob = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageRemoveBlobData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<PackageRemoveBlobResponse, PackageRemoveBlobError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{id}/blob/{Name}",
	});
};

export const packageDownloadBlob = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageDownloadBlobData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PackageDownloadBlobResponse, PackageDownloadBlobError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{id}/blob/{Name}",
	});
};

export const packageGetLatest = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageGetLatestData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PackageGetLatestResponse, PackageGetLatestError, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{Name}/latest",
	});
};

export const packageGetLatest1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PackageGetLatest1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PackageGetLatest1Response, PackageGetLatest1Error, ThrowOnError>({
		...options,
		url: "/api/platform/packages/{Name}/latest/{Version}",
	});
};

export const permissionDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PermissionDefinitionCreateResponse,
		PermissionDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions",
	});
};

export const permissionDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PermissionDefinitionGetListResponse,
		PermissionDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions",
	});
};

export const permissionDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		PermissionDefinitionDeleteResponse,
		PermissionDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/{name}",
	});
};

export const permissionDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PermissionDefinitionGetResponse, PermissionDefinitionGetError, ThrowOnError>({
		...options,
		url: "/api/permission-management/definitions/{name}",
	});
};

export const permissionDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		PermissionDefinitionUpdateResponse,
		PermissionDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/{name}",
	});
};

export const permissionGroupDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionGroupDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		PermissionGroupDefinitionCreateResponse,
		PermissionGroupDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/groups",
	});
};

export const permissionGroupDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionGroupDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PermissionGroupDefinitionGetListResponse,
		PermissionGroupDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/groups",
	});
};

export const permissionGroupDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionGroupDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		PermissionGroupDefinitionDeleteResponse,
		PermissionGroupDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/groups/{name}",
	});
};

export const permissionGroupDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionGroupDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		PermissionGroupDefinitionGetResponse,
		PermissionGroupDefinitionGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/groups/{name}",
	});
};

export const permissionGroupDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PermissionGroupDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		PermissionGroupDefinitionUpdateResponse,
		PermissionGroupDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/permission-management/definitions/groups/{name}",
	});
};

export const permissionsGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionsGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PermissionsGetResponse, PermissionsGetError, ThrowOnError>({
		...options,
		url: "/api/permission-management/permissions",
	});
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PermissionsUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<PermissionsUpdateResponse, PermissionsUpdateError, ThrowOnError>({
		...options,
		url: "/api/permission-management/permissions",
	});
};

export const privateFilesUpload = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PrivateFilesUploadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PrivateFilesUploadResponse, PrivateFilesUploadError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/files/private",
	});
};

export const privateFilesDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<PrivateFilesDeleteResponse, PrivateFilesDeleteError, ThrowOnError>({
		...options,
		url: "/api/files/private",
	});
};

export const privateFilesUpload1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PrivateFilesUpload1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PrivateFilesUpload1Response, PrivateFilesUpload1Error, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/files/private/upload",
	});
};

export const privateFilesGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PrivateFilesGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGetListResponse, PrivateFilesGetListError, ThrowOnError>({
		...options,
		url: "/api/files/private/search",
	});
};

export const privateFilesGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGetResponse, PrivateFilesGetError, ThrowOnError>({
		...options,
		url: "/api/files/private/{Name}",
	});
};

export const privateFilesGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet1Response, PrivateFilesGet1Error, ThrowOnError>({
		...options,
		url: "/api/files/private/{Name}/{Process}",
	});
};

export const privateFilesGet2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet2Response, PrivateFilesGet2Error, ThrowOnError>({
		...options,
		url: "/api/files/private/p/{Path}/{Name}",
	});
};

export const privateFilesGet3 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet3Response, PrivateFilesGet3Error, ThrowOnError>({
		...options,
		url: "/api/files/private/p/{Path}/{Name}/{Process}",
	});
};

export const privateFilesGet4 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet4Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet4Response, PrivateFilesGet4Error, ThrowOnError>({
		...options,
		url: "/api/files/private/t/{TenantId}/{Name}",
	});
};

export const privateFilesGet5 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet5Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet5Response, PrivateFilesGet5Error, ThrowOnError>({
		...options,
		url: "/api/files/private/t/{TenantId}/{Name}/{Process}",
	});
};

export const privateFilesGet6 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet6Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet6Response, PrivateFilesGet6Error, ThrowOnError>({
		...options,
		url: "/api/files/private/t/{TenantId}/p/{Path}/{Name}",
	});
};

export const privateFilesGet7 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PrivateFilesGet7Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGet7Response, PrivateFilesGet7Error, ThrowOnError>({
		...options,
		url: "/api/files/private/t/{TenantId}/p/{Path}/{Name}/{Process}",
	});
};

export const privateFilesGetShareList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PrivateFilesGetShareListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PrivateFilesGetShareListResponse, PrivateFilesGetShareListError, ThrowOnError>(
		{
			...options,
			url: "/api/files/private/share",
		},
	);
};

export const privateFilesShare = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PrivateFilesShareData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PrivateFilesShareResponse, PrivateFilesShareError, ThrowOnError>({
		...options,
		url: "/api/files/private/share",
	});
};

export const profileGetSessions = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileGetSessionsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ProfileGetSessionsResponse, ProfileGetSessionsError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile/sessions",
	});
};

export const profileRevokeSession = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ProfileRevokeSessionData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<ProfileRevokeSessionResponse, ProfileRevokeSessionError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile/sessions/{sessionId}/revoke",
	});
};

export const profileGetTwoFactorEnabled = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileGetTwoFactorEnabledData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ProfileGetTwoFactorEnabledResponse,
		ProfileGetTwoFactorEnabledError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/two-factor",
	});
};

export const profileChangeTwoFactorEnabled = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileChangeTwoFactorEnabledData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		ProfileChangeTwoFactorEnabledResponse,
		ProfileChangeTwoFactorEnabledError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/change-two-factor",
	});
};

export const profileSendChangePhoneNumberCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileSendChangePhoneNumberCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ProfileSendChangePhoneNumberCodeResponse,
		ProfileSendChangePhoneNumberCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/send-phone-number-change-code",
	});
};

export const profileChangePhoneNumber = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileChangePhoneNumberData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ProfileChangePhoneNumberResponse, ProfileChangePhoneNumberError, ThrowOnError>(
		{
			...options,
			url: "/api/account/my-profile/change-phone-number",
		},
	);
};

export const profileSendEmailConfirmLink = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileSendEmailConfirmLinkData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ProfileSendEmailConfirmLinkResponse,
		ProfileSendEmailConfirmLinkError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/send-email-confirm-link",
	});
};

export const profileConfirmEmail = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileConfirmEmailData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ProfileConfirmEmailResponse, ProfileConfirmEmailError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile/confirm-email",
	});
};

export const profileGetAuthenticator = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileGetAuthenticatorData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ProfileGetAuthenticatorResponse, ProfileGetAuthenticatorError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile/authenticator",
	});
};

export const profileVerifyAuthenticatorCode = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileVerifyAuthenticatorCodeData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ProfileVerifyAuthenticatorCodeResponse,
		ProfileVerifyAuthenticatorCodeError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/verify-authenticator-code",
	});
};

export const profileResetAuthenticator = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileResetAuthenticatorData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ProfileResetAuthenticatorResponse,
		ProfileResetAuthenticatorError,
		ThrowOnError
	>({
		...options,
		url: "/api/account/my-profile/reset-authenticator",
	});
};

export const profileGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ProfileGetResponse, ProfileGetError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile",
	});
};

export const profileUpdate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ProfileUpdateResponse, ProfileUpdateError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile",
	});
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ProfileChangePasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ProfileChangePasswordResponse, ProfileChangePasswordError, ThrowOnError>({
		...options,
		url: "/api/account/my-profile/change-password",
	});
};

export const publicFilesUpload = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PublicFilesUploadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PublicFilesUploadResponse, PublicFilesUploadError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/files/public",
	});
};

export const publicFilesDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<PublicFilesDeleteResponse, PublicFilesDeleteError, ThrowOnError>({
		...options,
		url: "/api/files/public",
	});
};

export const publicFilesUpload1 = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PublicFilesUpload1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PublicFilesUpload1Response, PublicFilesUpload1Error, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/files/public/upload",
	});
};

export const publicFilesGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<PublicFilesGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGetListResponse, PublicFilesGetListError, ThrowOnError>({
		...options,
		url: "/api/files/public/search",
	});
};

export const publicFilesGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGetResponse, PublicFilesGetError, ThrowOnError>({
		...options,
		url: "/api/files/public/{Name}",
	});
};

export const publicFilesGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet1Response, PublicFilesGet1Error, ThrowOnError>({
		...options,
		url: "/api/files/public/{Name}/{Process}",
	});
};

export const publicFilesGet2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet2Response, PublicFilesGet2Error, ThrowOnError>({
		...options,
		url: "/api/files/public/p/{Path}/{Name}",
	});
};

export const publicFilesGet3 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet3Response, PublicFilesGet3Error, ThrowOnError>({
		...options,
		url: "/api/files/public/p/{Path}/{Name}/{Process}",
	});
};

export const publicFilesGet4 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet4Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet4Response, PublicFilesGet4Error, ThrowOnError>({
		...options,
		url: "/api/files/public/t/{TenantId}/{Name}",
	});
};

export const publicFilesGet5 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet5Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet5Response, PublicFilesGet5Error, ThrowOnError>({
		...options,
		url: "/api/files/public/t/{TenantId}/{Name}/{Process}",
	});
};

export const publicFilesGet6 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet6Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet6Response, PublicFilesGet6Error, ThrowOnError>({
		...options,
		url: "/api/files/public/t/{TenantId}/p/{Path}/{Name}",
	});
};

export const publicFilesGet7 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublicFilesGet7Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<PublicFilesGet7Response, PublicFilesGet7Error, ThrowOnError>({
		...options,
		url: "/api/files/public/t/{TenantId}/p/{Path}/{Name}/{Process}",
	});
};

export const publishHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<PublishHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<PublishHandleResponse, PublishHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{workflowDefinitionId}/publish",
	});
};

export const resourceGetByName = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ResourceGetByNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ResourceGetByNameResponse, ResourceGetByNameError, ThrowOnError>({
		...options,
		url: "/api/localization/resources/{name}",
	});
};

export const resourceDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ResourceDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<ResourceDeleteResponse, ResourceDeleteError, ThrowOnError>({
		...options,
		url: "/api/localization/resources/{name}",
	});
};

export const resourceUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ResourceUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ResourceUpdateResponse, ResourceUpdateError, ThrowOnError>({
		...options,
		url: "/api/localization/resources/{name}",
	});
};

export const resourceCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ResourceCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<ResourceCreateResponse, ResourceCreateError, ThrowOnError>({
		...options,
		url: "/api/localization/resources",
	});
};

export const resourceGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ResourceGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ResourceGetListResponse, ResourceGetListError, ThrowOnError>({
		...options,
		url: "/api/abp/localization/resources",
	});
};

export const restoreHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RestoreHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RestoreHandleResponse, RestoreHandleError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/v{apiVersion}/workflow-definitions/restore",
	});
};

export const retractHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RetractHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RetractHandleResponse, RetractHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{workflowDefinitionId}/retract",
	});
};

export const retryHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RetryHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RetryHandleResponse, RetryHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-instances/{id}/retry",
	});
};

export const revertHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RevertHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RevertHandleResponse, RevertHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflow-definitions/{definitionId}/revert/{version}",
	});
};

export const roleGetOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleGetOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleGetOrganizationUnitsResponse, RoleGetOrganizationUnitsError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/roles/{id}/organization-units",
		},
	);
};

export const roleSetOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleSetOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<RoleSetOrganizationUnitsResponse, RoleSetOrganizationUnitsError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/roles/{id}/organization-units",
		},
	);
};

export const roleRemoveOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleRemoveOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		RoleRemoveOrganizationUnitsResponse,
		RoleRemoveOrganizationUnitsError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/roles/{id}/organization-units/{ouId}",
	});
};

export const roleGetClaims = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleGetClaimsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleGetClaimsResponse, RoleGetClaimsError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}/claims",
	});
};

export const roleAddClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleAddClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RoleAddClaimResponse, RoleAddClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}/claims",
	});
};

export const roleUpdateClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleUpdateClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<RoleUpdateClaimResponse, RoleUpdateClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}/claims",
	});
};

export const roleDeleteClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleDeleteClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<RoleDeleteClaimResponse, RoleDeleteClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}/claims",
	});
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<RoleGetAllListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleGetAllListResponse, RoleGetAllListError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/all",
	});
};

export const roleGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<RoleGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleGetListResponse, RoleGetListError, ThrowOnError>({
		...options,
		url: "/api/identity/roles",
	});
};

export const roleCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<RoleCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RoleCreateResponse, RoleCreateError, ThrowOnError>({
		...options,
		url: "/api/identity/roles",
	});
};

export const roleGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleGetResponse, RoleGetError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}",
	});
};

export const roleUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<RoleUpdateResponse, RoleUpdateError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}",
	});
};

export const roleDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<RoleDeleteResponse, RoleDeleteError, ThrowOnError>({
		...options,
		url: "/api/identity/roles/{id}",
	});
};

export const roleEntityRuleGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleEntityRuleGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<RoleEntityRuleGetResponse, RoleEntityRuleGetError, ThrowOnError>({
		...options,
		url: "/api/data-protection-management/entity-rule/roles",
	});
};

export const roleEntityRuleCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<RoleEntityRuleCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<RoleEntityRuleCreateResponse, RoleEntityRuleCreateError, ThrowOnError>({
		...options,
		url: "/api/data-protection-management/entity-rule/roles",
	});
};

export const roleEntityRuleUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<RoleEntityRuleUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<RoleEntityRuleUpdateResponse, RoleEntityRuleUpdateError, ThrowOnError>({
		...options,
		url: "/api/data-protection-management/entity-rule/roles/{id}",
	});
};

export const securityLogDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SecurityLogDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<SecurityLogDeleteResponse, SecurityLogDeleteError, ThrowOnError>({
		...options,
		url: "/api/auditing/security-log/{id}",
	});
};

export const securityLogGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SecurityLogGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<SecurityLogGetResponse, SecurityLogGetError, ThrowOnError>({
		...options,
		url: "/api/auditing/security-log/{id}",
	});
};

export const securityLogGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SecurityLogGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<SecurityLogGetListResponse, SecurityLogGetListError, ThrowOnError>({
		...options,
		url: "/api/auditing/security-log",
	});
};

export const settingSetCurrentTenant = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingSetCurrentTenantData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<SettingSetCurrentTenantResponse, SettingSetCurrentTenantError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/change-current-tenant",
	});
};

export const settingSetGlobal = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingSetGlobalData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<SettingSetGlobalResponse, SettingSetGlobalError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/change-global",
	});
};

export const settingGetAllForGlobal = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingGetAllForGlobalData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<SettingGetAllForGlobalResponse, SettingGetAllForGlobalError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/by-global",
	});
};

export const settingGetAllForCurrentTenant = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingGetAllForCurrentTenantData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SettingGetAllForCurrentTenantResponse,
		SettingGetAllForCurrentTenantError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/settings/by-current-tenant",
	});
};

export const settingSendTestEmail = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingSendTestEmailData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<SettingSendTestEmailResponse, SettingSendTestEmailError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/send-test-email",
	});
};

export const settingDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<SettingDefinitionCreateResponse, SettingDefinitionCreateError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/definitions",
	});
};

export const settingDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<SettingDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<SettingDefinitionGetListResponse, SettingDefinitionGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/setting-management/settings/definitions",
		},
	);
};

export const settingDefinitionDeleteOrRestore = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SettingDefinitionDeleteOrRestoreData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		SettingDefinitionDeleteOrRestoreResponse,
		SettingDefinitionDeleteOrRestoreError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/settings/definitions/{name}",
	});
};

export const settingDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SettingDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<SettingDefinitionGetResponse, SettingDefinitionGetError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/definitions/{name}",
	});
};

export const settingDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<SettingDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<SettingDefinitionUpdateResponse, SettingDefinitionUpdateError, ThrowOnError>({
		...options,
		url: "/api/setting-management/settings/definitions/{name}",
	});
};

export const staticFilesUpload = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<StaticFilesUploadData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<StaticFilesUploadResponse, StaticFilesUploadError, ThrowOnError>({
		...options,
		...formDataBodySerializer,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
		url: "/api/files/static",
	});
};

export const staticFilesGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGetResponse, StaticFilesGetError, ThrowOnError>({
		...options,
		url: "/api/files/static/{Bucket}/{Name}",
	});
};

export const staticFilesGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet1Response, StaticFilesGet1Error, ThrowOnError>({
		...options,
		url: "/api/files/static/{Bucket}/{Name}/{Process}",
	});
};

export const staticFilesGet2 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet2Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet2Response, StaticFilesGet2Error, ThrowOnError>({
		...options,
		url: "/api/files/static/{Bucket}/p/{Path}/{Name}",
	});
};

export const staticFilesGet3 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet3Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet3Response, StaticFilesGet3Error, ThrowOnError>({
		...options,
		url: "/api/files/static/{Bucket}/p/{Path}/{Name}/{Process}",
	});
};

export const staticFilesGet4 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet4Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet4Response, StaticFilesGet4Error, ThrowOnError>({
		...options,
		url: "/api/files/static/t/{TenantId}/{Bucket}/{Name}",
	});
};

export const staticFilesGet5 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet5Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet5Response, StaticFilesGet5Error, ThrowOnError>({
		...options,
		url: "/api/files/static/t/{TenantId}/{Bucket}/{Name}/{Process}",
	});
};

export const staticFilesGet6 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet6Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet6Response, StaticFilesGet6Error, ThrowOnError>({
		...options,
		url: "/api/files/static/t/{TenantId}/{Bucket}/p/{Path}/{Name}",
	});
};

export const staticFilesGet7 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<StaticFilesGet7Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<StaticFilesGet7Response, StaticFilesGet7Error, ThrowOnError>({
		...options,
		url: "/api/files/static/t/{TenantId}/{Bucket}/p/{Path}/{Name}/{Process}",
	});
};

export const tenantGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TenantGetResponse, TenantGetError, ThrowOnError>({
		...options,
		url: "/api/saas/tenants/{id}",
	});
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<TenantUpdateResponse, TenantUpdateError, ThrowOnError>({
		...options,
		url: "/api/saas/tenants/{id}",
	});
};

export const tenantDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<TenantDeleteResponse, TenantDeleteError, ThrowOnError>({
		...options,
		url: "/api/saas/tenants/{id}",
	});
};

export const tenantGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TenantGet1Response, TenantGet1Error, ThrowOnError>({
		...options,
		url: "/api/saas/tenants/by-name/{name}",
	});
};

export const tenantGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<TenantGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TenantGetListResponse, TenantGetListError, ThrowOnError>({
		...options,
		url: "/api/saas/tenants",
	});
};

export const tenantCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<TenantCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<TenantCreateResponse, TenantCreateError, ThrowOnError>({
		...options,
		url: "/api/saas/tenants",
	});
};

export const tenantGetConnectionString = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantGetConnectionStringData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TenantGetConnectionStringResponse,
		TenantGetConnectionStringError,
		ThrowOnError
	>({
		...options,
		url: "/api/saas/tenants/{id}/connection-string/{name}",
	});
};

export const tenantDeleteConnectionString = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantDeleteConnectionStringData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		TenantDeleteConnectionStringResponse,
		TenantDeleteConnectionStringError,
		ThrowOnError
	>({
		...options,
		url: "/api/saas/tenants/{id}/connection-string/{name}",
	});
};

export const tenantGetConnectionString1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantGetConnectionString1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TenantGetConnectionString1Response,
		TenantGetConnectionString1Error,
		ThrowOnError
	>({
		...options,
		url: "/api/saas/tenants/{id}/connection-string",
	});
};

export const tenantSetConnectionString = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TenantSetConnectionStringData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		TenantSetConnectionStringResponse,
		TenantSetConnectionStringError,
		ThrowOnError
	>({
		...options,
		url: "/api/saas/tenants/{id}/connection-string",
	});
};

export const textSetText = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<TextSetTextData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<TextSetTextResponse, TextSetTextError, ThrowOnError>({
		...options,
		url: "/api/localization/texts",
	});
};

export const textRestoreToDefault = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextRestoreToDefaultData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<TextRestoreToDefaultResponse, TextRestoreToDefaultError, ThrowOnError>({
		...options,
		url: "/api/localization/texts/restore-to-default",
	});
};

export const textGetByCultureKey = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextGetByCultureKeyData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TextGetByCultureKeyResponse, TextGetByCultureKeyError, ThrowOnError>({
		...options,
		url: "/api/abp/localization/texts/by-culture-key",
	});
};

export const textGetList = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TextGetListResponse, TextGetListError, ThrowOnError>({
		...options,
		url: "/api/abp/localization/texts",
	});
};

export const textTemplateContentGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateContentGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TextTemplateContentGetResponse, TextTemplateContentGetError, ThrowOnError>({
		...options,
		url: "/api/text-templating/templates/content/{Name}",
	});
};

export const textTemplateContentGet1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateContentGet1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TextTemplateContentGet1Response, TextTemplateContentGet1Error, ThrowOnError>({
		...options,
		url: "/api/text-templating/templates/content/{Culture}/{Name}",
	});
};

export const textTemplateContentRestoreToDefault = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateContentRestoreToDefaultData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		TextTemplateContentRestoreToDefaultResponse,
		TextTemplateContentRestoreToDefaultError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/templates/content/{name}/restore-to-default",
	});
};

export const textTemplateContentUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateContentUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		TextTemplateContentUpdateResponse,
		TextTemplateContentUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/templates/content/{name}",
	});
};

export const textTemplateDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<TextTemplateDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		TextTemplateDefinitionCreateResponse,
		TextTemplateDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/template/definitions",
	});
};

export const textTemplateDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<TextTemplateDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TextTemplateDefinitionGetListResponse,
		TextTemplateDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/template/definitions",
	});
};

export const textTemplateDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		TextTemplateDefinitionDeleteResponse,
		TextTemplateDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/template/definitions/{name}",
	});
};

export const textTemplateDefinitionGetByName = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateDefinitionGetByNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		TextTemplateDefinitionGetByNameResponse,
		TextTemplateDefinitionGetByNameError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/template/definitions/{name}",
	});
};

export const textTemplateDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TextTemplateDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		TextTemplateDefinitionUpdateResponse,
		TextTemplateDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/text-templating/template/definitions/{name}",
	});
};

export const themeSettingGet = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ThemeSettingGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ThemeSettingGetResponse, ThemeSettingGetError, ThrowOnError>({
		...options,
		url: "/api/platform/theme/vue-vben-admin",
	});
};

export const themeSettingChange = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ThemeSettingChangeData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<ThemeSettingChangeResponse, ThemeSettingChangeError, ThrowOnError>({
		...options,
		url: "/api/platform/theme/vue-vben-admin/change",
	});
};

export const triggerHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TriggerHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<TriggerHandleResponse, TriggerHandleError, ThrowOnError>({
		...options,
		url: "/v{apiVersion}/workflows/trigger",
	});
};

export const triggerEndpointHandle = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TriggerEndpointHandleData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<TriggerEndpointHandleResponse, TriggerEndpointHandleError, ThrowOnError>({
		...options,
		url: "/signals/trigger/{token}",
	});
};

export const triggerEndpointHandle1 = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<TriggerEndpointHandle1Data, ThrowOnError>,
) => {
	return (options?.client ?? client).post<TriggerEndpointHandle1Response, TriggerEndpointHandle1Error, ThrowOnError>({
		...options,
		url: "/signals/trigger/{token}",
	});
};

export const userGetOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserGetOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetOrganizationUnitsResponse, UserGetOrganizationUnitsError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/users/{id}/organization-units",
		},
	);
};

export const userSetOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserSetOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserSetOrganizationUnitsResponse, UserSetOrganizationUnitsError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/users/{id}/organization-units",
		},
	);
};

export const userRemoveOrganizationUnits = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserRemoveOrganizationUnitsData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		UserRemoveOrganizationUnitsResponse,
		UserRemoveOrganizationUnitsError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/users/{id}/organization-units/{ouId}",
	});
};

export const userGetClaims = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserGetClaimsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetClaimsResponse, UserGetClaimsError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/claims",
	});
};

export const userAddClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserAddClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UserAddClaimResponse, UserAddClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/claims",
	});
};

export const userUpdateClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserUpdateClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserUpdateClaimResponse, UserUpdateClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/claims",
	});
};

export const userDeleteClaim = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserDeleteClaimData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<UserDeleteClaimResponse, UserDeleteClaimError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/claims",
	});
};

export const userChangePassword = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserChangePasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserChangePasswordResponse, UserChangePasswordError, ThrowOnError>({
		...options,
		url: "/api/identity/users/change-password",
	});
};

export const userChangeTwoFactorEnabled = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserChangeTwoFactorEnabledData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		UserChangeTwoFactorEnabledResponse,
		UserChangeTwoFactorEnabledError,
		ThrowOnError
	>({
		...options,
		url: "/api/identity/users/change-two-factor",
	});
};

export const userLock = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserLockData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserLockResponse, UserLockError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/lock/{seconds}",
	});
};

export const userUnLock = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserUnLockData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserUnLockResponse, UserUnLockError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/unlock",
	});
};

export const userGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetResponse, UserGetError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}",
	});
};

export const userUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserUpdateResponse, UserUpdateError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}",
	});
};

export const userDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<UserDeleteResponse, UserDeleteError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}",
	});
};

export const userGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetListResponse, UserGetListError, ThrowOnError>({
		...options,
		url: "/api/identity/users",
	});
};

export const userCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UserCreateResponse, UserCreateError, ThrowOnError>({
		...options,
		url: "/api/identity/users",
	});
};

export const userGetRoles = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserGetRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetRolesResponse, UserGetRolesError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/roles",
	});
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserUpdateRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserUpdateRolesResponse, UserUpdateRolesError, ThrowOnError>({
		...options,
		url: "/api/identity/users/{id}/roles",
	});
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGetAssignableRolesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGetAssignableRolesResponse, UserGetAssignableRolesError, ThrowOnError>({
		...options,
		url: "/api/identity/users/assignable-roles",
	});
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFindByUsernameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserFindByUsernameResponse, UserFindByUsernameError, ThrowOnError>({
		...options,
		url: "/api/identity/users/by-username/{userName}",
	});
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFindByEmailData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserFindByEmailResponse, UserFindByEmailError, ThrowOnError>({
		...options,
		url: "/api/identity/users/by-email/{email}",
	});
};

export const userFavoriteMenuCreate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFavoriteMenuCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UserFavoriteMenuCreateResponse, UserFavoriteMenuCreateError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/favorites/{userId}",
	});
};

export const userFavoriteMenuGetList = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFavoriteMenuGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserFavoriteMenuGetListResponse, UserFavoriteMenuGetListError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/favorites/{userId}",
	});
};

export const userFavoriteMenuUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFavoriteMenuUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserFavoriteMenuUpdateResponse, UserFavoriteMenuUpdateError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/favorites/{userId}",
	});
};

export const userFavoriteMenuCreateMyFavoriteMenu = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserFavoriteMenuCreateMyFavoriteMenuData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UserFavoriteMenuCreateMyFavoriteMenuResponse,
		UserFavoriteMenuCreateMyFavoriteMenuError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/menus/favorites/my-favorite-menus",
	});
};

export const userFavoriteMenuGetMyFavoriteMenuList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserFavoriteMenuGetMyFavoriteMenuListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UserFavoriteMenuGetMyFavoriteMenuListResponse,
		UserFavoriteMenuGetMyFavoriteMenuListError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/menus/favorites/my-favorite-menus",
	});
};

export const userFavoriteMenuUpdateMyFavoriteMenu = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserFavoriteMenuUpdateMyFavoriteMenuData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		UserFavoriteMenuUpdateMyFavoriteMenuResponse,
		UserFavoriteMenuUpdateMyFavoriteMenuError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/menus/favorites/my-favorite-menus",
	});
};

export const userFavoriteMenuDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFavoriteMenuDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<UserFavoriteMenuDeleteResponse, UserFavoriteMenuDeleteError, ThrowOnError>({
		...options,
		url: "/api/platform/menus/favorites/{userId}/{MenuId}",
	});
};

export const userFavoriteMenuDeleteMyFavoriteMenu = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserFavoriteMenuDeleteMyFavoriteMenuData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		UserFavoriteMenuDeleteMyFavoriteMenuResponse,
		UserFavoriteMenuDeleteMyFavoriteMenuError,
		ThrowOnError
	>({
		...options,
		url: "/api/platform/menus/favorites/my-favorite-menus/{MenuId}",
	});
};

export const userGroupApplyJoinGroup = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGroupApplyJoinGroupData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UserGroupApplyJoinGroupResponse, UserGroupApplyJoinGroupError, ThrowOnError>({
		...options,
		url: "/api/im/user-groups/join",
	});
};

export const userGroupGetGroupUsers = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserGroupGetGroupUsersData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGroupGetGroupUsersResponse, UserGroupGetGroupUsersError, ThrowOnError>({
		...options,
		url: "/api/im/user-groups",
	});
};

export const userGroupGetMyGroups = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGroupGetMyGroupsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserGroupGetMyGroupsResponse, UserGroupGetMyGroupsError, ThrowOnError>({
		...options,
		url: "/api/im/user-groups/me",
	});
};

export const userGroupGroupAcceptUser = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGroupGroupAcceptUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserGroupGroupAcceptUserResponse, UserGroupGroupAcceptUserError, ThrowOnError>(
		{
			...options,
			url: "/api/im/user-groups/accept",
		},
	);
};

export const userGroupGroupRemoveUser = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserGroupGroupRemoveUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<UserGroupGroupRemoveUserResponse, UserGroupGroupRemoveUserError, ThrowOnError>(
		{
			...options,
			url: "/api/im/user-groups/remove",
		},
	);
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserLookupFindByIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserLookupFindByIdResponse, UserLookupFindByIdError, ThrowOnError>({
		...options,
		url: "/api/identity/users/lookup/{id}",
	});
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UserLookupFindByUserNameData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, ThrowOnError>(
		{
			...options,
			url: "/api/identity/users/lookup/by-username/{userName}",
		},
	);
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserLookupSearchData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserLookupSearchResponse, UserLookupSearchError, ThrowOnError>({
		...options,
		url: "/api/identity/users/lookup/search",
	});
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserLookupGetCountData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UserLookupGetCountResponse, UserLookupGetCountError, ThrowOnError>({
		...options,
		url: "/api/identity/users/lookup/count",
	});
};

export const userSettingGetAllForCurrentUser = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserSettingGetAllForCurrentUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UserSettingGetAllForCurrentUserResponse,
		UserSettingGetAllForCurrentUserError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/settings/by-current-user",
	});
};

export const userSettingSetCurrentUser = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UserSettingSetCurrentUserData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		UserSettingSetCurrentUserResponse,
		UserSettingSetCurrentUserError,
		ThrowOnError
	>({
		...options,
		url: "/api/setting-management/settings/change-current-user",
	});
};

export const webhookDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<WebhookDefinitionCreateResponse, WebhookDefinitionCreateError, ThrowOnError>({
		...options,
		url: "/api/webhooks/definitions",
	});
};

export const webhookDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<WebhookDefinitionGetListResponse, WebhookDefinitionGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/webhooks/definitions",
		},
	);
};

export const webhookDefinitionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookDefinitionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookDefinitionDeleteResponse,
		WebhookDefinitionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/{name}",
	});
};

export const webhookDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<WebhookDefinitionGetResponse, WebhookDefinitionGetError, ThrowOnError>({
		...options,
		url: "/api/webhooks/definitions/{name}",
	});
};

export const webhookDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<WebhookDefinitionUpdateResponse, WebhookDefinitionUpdateError, ThrowOnError>({
		...options,
		url: "/api/webhooks/definitions/{name}",
	});
};

export const webhookGroupDefinitionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookGroupDefinitionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WebhookGroupDefinitionCreateResponse,
		WebhookGroupDefinitionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/groups",
	});
};

export const webhookGroupDefinitionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookGroupDefinitionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		WebhookGroupDefinitionGetListResponse,
		WebhookGroupDefinitionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/groups",
	});
};

export const webhookGroupDefinitionDeleteAysnc = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookGroupDefinitionDeleteAysncData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookGroupDefinitionDeleteAysncResponse,
		WebhookGroupDefinitionDeleteAysncError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/groups/{name}",
	});
};

export const webhookGroupDefinitionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookGroupDefinitionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		WebhookGroupDefinitionGetResponse,
		WebhookGroupDefinitionGetError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/groups/{name}",
	});
};

export const webhookGroupDefinitionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookGroupDefinitionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		WebhookGroupDefinitionUpdateResponse,
		WebhookGroupDefinitionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/definitions/groups/{name}",
	});
};

export const webhookPublishPublish = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookPublishPublishData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<WebhookPublishPublishResponse, WebhookPublishPublishError, ThrowOnError>({
		...options,
		url: "/api/webhooks/publish",
	});
};

export const webhookSendRecordGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSendRecordGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<WebhookSendRecordGetResponse, WebhookSendRecordGetError, ThrowOnError>({
		...options,
		url: "/api/webhooks/send-attempts/{id}",
	});
};

export const webhookSendRecordDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSendRecordDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookSendRecordDeleteResponse,
		WebhookSendRecordDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/send-attempts/{id}",
	});
};

export const webhookSendRecordDeleteMany = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSendRecordDeleteManyData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookSendRecordDeleteManyResponse,
		WebhookSendRecordDeleteManyError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/send-attempts/delete-many",
	});
};

export const webhookSendRecordGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSendRecordGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<WebhookSendRecordGetListResponse, WebhookSendRecordGetListError, ThrowOnError>(
		{
			...options,
			url: "/api/webhooks/send-attempts",
		},
	);
};

export const webhookSendRecordResend = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSendRecordResendData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<WebhookSendRecordResendResponse, WebhookSendRecordResendError, ThrowOnError>({
		...options,
		url: "/api/webhooks/send-attempts/{id}/resend",
	});
};

export const webhookSendRecordResendMany = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSendRecordResendManyData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WebhookSendRecordResendManyResponse,
		WebhookSendRecordResendManyError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/send-attempts/resend-many",
	});
};

export const webhookSubscriptionCreate = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSubscriptionCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		WebhookSubscriptionCreateResponse,
		WebhookSubscriptionCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions",
	});
};

export const webhookSubscriptionGetList = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSubscriptionGetListData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		WebhookSubscriptionGetListResponse,
		WebhookSubscriptionGetListError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions",
	});
};

export const webhookSubscriptionDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSubscriptionDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookSubscriptionDeleteResponse,
		WebhookSubscriptionDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions/{id}",
	});
};

export const webhookSubscriptionGet = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSubscriptionGetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<WebhookSubscriptionGetResponse, WebhookSubscriptionGetError, ThrowOnError>({
		...options,
		url: "/api/webhooks/subscriptions/{id}",
	});
};

export const webhookSubscriptionUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<WebhookSubscriptionUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		WebhookSubscriptionUpdateResponse,
		WebhookSubscriptionUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions/{id}",
	});
};

export const webhookSubscriptionDeleteMany = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSubscriptionDeleteManyData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		WebhookSubscriptionDeleteManyResponse,
		WebhookSubscriptionDeleteManyError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions/delete-many",
	});
};

export const webhookSubscriptionGetAllAvailableWebhooks = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<WebhookSubscriptionGetAllAvailableWebhooksData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		WebhookSubscriptionGetAllAvailableWebhooksResponse,
		WebhookSubscriptionGetAllAvailableWebhooksError,
		ThrowOnError
	>({
		...options,
		url: "/api/webhooks/subscriptions/availables",
	});
};
